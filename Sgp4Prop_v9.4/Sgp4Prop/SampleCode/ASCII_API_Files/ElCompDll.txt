  1. ElCompInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes ElComp dll for use in the program 
Syntax: 
	int ElCompInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit()
Return Value:
	0 if the ElComp dll is initialized successfully, non-0 if error
=======================================================================================
  2. ElCompGetInfo
Purpose:
	 Returns information about the current version of ElComp.dll. The information is placed in the
	 string parameter passed-in
Syntax: 
	void ElCompGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about ElComp.dll
=======================================================================================
  3. ElCompSetCriteria
Purpose:
	 ElCompSetCriteria for ElComp 'Manual' mode which replaces default association status criteria
	 for "FULL", including primary vs. secondary element comparison difference thresholds in 
	 inclination, coplanar angle (determined as the dot product of the primary and secondary 
	 angular momentum vectors), perigee height, eccentricity, orbital period, and argument of perigee.
	 See ElCompGetCriteria for a description of the xa_ecdiff array.
Syntax: 
	void ElCompSetCriteria((in-Double[32]) xa_ecdiff)
Parameters: 
	xa_ecdiff: Array to store manual setting criteria for "FULL" (MAX1 parameters only).  See XA_ECDIFF_?
=======================================================================================
  4. ElCompGetCriteria
Purpose:
	 Retrieves criteria settings for ElComp
	 
	 ElCompGetCriteria establishes the difference thresholds the element comparison program uses
	 to evaluate the association statuses between the primary and secondary element sets.  The
	 following values are the default settings for ELCOMP:
	 
	 
	     FULL element comparison, if all of the following criteria are met:
	         
	             Inclination                         difference less than      0.10 degrees
	             Angular Momentum Vector             difference less than      0.15 degrees
	             Perigee Height                      difference less than        25 km
	             Period                              difference less than      0.15 minutes
	             Eccentricity                        difference less than     0.005
	             argument of perigee (when e>.005)   difference less than         5 degrees
	         
	     CLOSE element comparison, if all the following criteria are met:
	         
	             Inclination                         difference less than      0.15 degrees
	             Angular Momentum Vector             difference less than      0.30 degrees
	             Perigee Height                      difference less than        75 km
	             Period                              difference less than      0.50 minutes
	             Eccentricity                        difference less than     0.015 
	             argument of perigee (when e>.005)   difference less than        10 degrees
	         
	     MAYBE element comparison, if all of the following criteria are met:
	         
	             Inclination                         difference less than      0.25 degrees
	             Angular Momentum Vector             difference less than      0.50 degrees
	             Perigee Height                      difference less than       100 km
	             Period                              difference less than      10.0 minutes
	             Eccentricity                        difference less than     0.025
	             argument of perigee (when e>.005)   difference less than        20 degrees
	         
	     If none of the combined criteria are met as described above, then ElComp found NONE in
	          the satellite comparison. The user may define their own criteria or use the automatic/
	          default criteria summarized above.
	 
	 
	 Order of elements in the input xa_ecdiff array:
	 
	     table
	 
	 Index
	 Index Interpretation
	 
	  0  inclination difference criteria for FULL evaluation, [degrees]
	  1  inclination difference criteria for CLOSE evaluation, [degrees]
	  2  inclination difference criteria for MAYBE evaluation, [degrees]
	  3  w Angular Momentum Vector dot product criteria for FULL evalutation, [degrees]
	  4  w Angular Momentum Vector dot product criteria for CLOSE evalutation, [degrees]
	  5  w Angular Momentum Vector dot product criteria for MAYBE evalutation, [degrees]
	  6  Perigee height difference criteria for FULL evaluation, [kilometers]
	  7  Perigee height difference criteria for CLOSE evaluation, [kilometers]
	  8  Perigee height difference criteria for MAYBE evaluation, [kilometers]
	  9  Eccentricity difference criteria for FULL evaluation
	 10  Eccentricity difference criteria for CLOSE evaluation
	 11  Eccentricity difference criteria for MAYBE evaluation
	 12  Period difference criteria for FULL evaluation
	 13  Period difference criteria for CLOSE evaluation
	 14  Period difference criteria for MAYBE evaluation
	 15  Argument of Perigee difference criteria for FULL evaluation
	 16  Argument of Perigee difference criteria for CLOSE evaluation
	 17  Argument of Perigee difference criteria for MAYBE evaluation
	 18-31  unused at this time  
	       
Syntax: 
	void ElCompGetCriteria((out-Double[32]) xa_ecdiff)
Parameters: 
	xa_ecdiff: Array to receive the ElComp criteria.  See XA_ECDIFF_?
=======================================================================================
  5. ElCompGetResults
Purpose:
	 ElCompGetResults executes ELCOMP, Element Comparison, to evaluate two element sets loaded
	   via their satKeys 
	 
	 
	 ELCOMP software description:
	 
	   ElCompGetResults executes ELCOMP, Element Comparison, to evaluate two element sets loaded
	   via their satKeys 
	 
	 
	 ELCOMP algorithm:
	 
	   ELCOMP uses inclination, right ascension of ascending node, perigee height, eccentricity,
	   period, argument of perigee, nodal crossing time, orbit plane alignment (via dot product
	   between the primary and secondary angular momentum vectors), and East Longitude (for
	   Geosynchronous orbits) to evaluate the degree of similarity between primary and secondary
	   element sets (orbit definitions) in terms of their relative size, shape, and orientation.
	   ELCOMP computes a correction, due to drag, to the nodal crossing time for each elset as part
	   of the nodal crossing time-difference evaluation. Because the epoch times of the primary and
	   secondary element sets are rarely the same, ELCOMP updates time-variant quantities to a
	   common time prior to element comparison.  Element sets with epochs that differ by more than
	   90 days are not evaluated.  Time-variant quantities updated to a common time include:
	   Right Ascension of Ascending Node, Argument of Perigee, and East Longitude (for Geosynchronous
	   oribts).  Time-variant quantities are updated to a common time by using the difference in
	   epoch times between the primary and secondary element sets and by determining the change
	   in argument of perigee with respect to time, the change in Right Ascension of Ascending
	   Node with respect to time, and for geosynchronous orbits, the East Longitude drift rate. 
	   ELCOMP also sets the nodal-crossing time criteria according to orbit type and epoch age,
	   allowing for longer nodal-crossing time differences for deep-space orbits versus near-Earth,
	   and longer time differences with greater differences in epoch, while also taking into account
	   perigee height for more circular orbits.  Argument of perigee is evaluated for eccentricities
	   greater than 0.005 only.  This is because for very-near circular orbits, the argement of perigee
	   becomes ill-defined such that perigee may vary widely due to epoch time difference, when in
	   fact the orbits are the same.  User-specified or default thresholds, along with orbital
	   element comparison differences are used by ELCOMP to produce an element comparison association
	   status for each primary-secondary pair.  Association statuses include FULL, CLOSE, MAYBE,
	   and NONE.  A typical application for ELCOMP is to automate determining if a new or external
	   element set is a duplicate or very similar element set to an existing internal element set
	   within a large catalog of element sets.
	 
	 
	 INPUTS include:
	 
	   table
	   (a) Primary element set to compare
	   (b) Secondary element set to be compared against
	   
	       (c)
	        
	          Specified orbital element comparison threshold values for FULL, CLOSE, MAYBE, and NONE
	       association statuses.  Specified element comparison thresholds include:
	         
	         
	         inclination
	         plane
	         perigee height
	         eccentricity
	         period
	         argument of perigee 
	         
	       
	   
	 
	 
	 
	 OUTPUTS include:
	   (a) Evaluation results of FULL, CLOSE, MAYBE, or NONE for each primary-secondary element
	       set pair
	 
	 Order of the input xa_elcom_pri(16) array - primary TLE satellite data:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	 0  inclination [degrees]
	 1  right ascension of ascending node [degrees]
	 2  eccentricity [unitless]
	 3  argument of perigee [degrees]
	 4  mean anomaly [degrees]
	 5  mean motion [revs/day]
	 6  epoch [fractional days since 1950]
	 7-15  not used at this time
	    
	 Order of the input xa_elcomp_sec(16) array - secondary TLE sat data, is same order as primary
	 
	 Order of the output xa_elcomp_deltas(16) array - delta quantities between primary and secondary
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	 0  delta Inclination [degrees]
	 1  delta Right Ascension of Ascending Node (RAAN) [degrees]
	 2  delta Perigeee Height [kilometers]
	 3  delta Orbital Period [minutes]
	 4  delta Coplanar angle (dot product of the w angular momentum vetors) [degrees]
	 5  delta Right Ascension dot (rate of change of the delta RAAN) [degrees/day]
	 6  delta Nodal crossing time [minutes]
	 7  number of fractional days to achieve 0.0 delta in RAAN, if 
	 8  Flag - sustained close approach possible, if non-zero
	 9  Flag - possible constellation member, if non-zero
	    
	 
	  elcom_astat possible return values:
	 
	 table
	 
	 Value
	 Interpretation
	 
	 1  FULL
	 2  CLOSE
	 3  MAYBE
	 4  NONE
	    
Syntax: 
	int ElCompGetResults((in-Long) priSatKey, (in-Long) secSatKey, (in-Integer) checkDeltaTime, (out-Double[16]) xa_elcom_pri, (out-Double[16]) xa_elcom_sec, (out-Double[16]) xa_elcom_deltas, (out-Integer) elcom_astat)
Parameters: 
	priSatKey: The primary satellite's unique key
	secSatKey: The secondary satellite's unique key
	checkDeltaTime: Suppress=0/Allow=1: check on nodal time and sync long
	xa_elcom_pri: Primary satellite data.   see XA_ELCOM_?
	xa_elcom_sec: Secondary satellite data.   see XA_ELCOM_?
	xa_elcom_deltas: Delta quantities between primary and secondary satellites.  see XA_ELCOM_?
	elcom_astat: =1:FULL, =2:CLOSE, =3:MAYBE, =4:NONE
Return Value:
	0 if ElComp is successful, non-0 if there is an error
=======================================================================================
  6. ElCompGetResults_MT
Purpose:
	 This is a thread-safe version of the ElCompGetResults
Syntax: 
	int ElCompGetResults_MT((in-Double[32]) xa_ecdiff, (in-Long) priSatKey, (in-Long) secSatKey, (in-Integer) checkDeltaTime, (out-Double[16]) xa_elcom_pri, (out-Double[16]) xa_elcom_sec, (out-Double[16]) xa_elcom_deltas, (out-Integer) elcom_astat)
Parameters: 
	xa_ecdiff: Array to store manual setting criteria for "FULL" (MAX1 parameters only).  See XA_ECDIFF_?
	priSatKey: The primary satellite's unique key
	secSatKey: The secondary satellite's unique key
	checkDeltaTime: Suppress=0/Allow=1: check on nodal time and sync long
	xa_elcom_pri: Primary satellite data.   see XA_ELCOM_?
	xa_elcom_sec: Secondary satellite data.   see XA_ELCOM_?
	xa_elcom_deltas: Delta quantities between primary and secondary satellites.  see XA_ELCOM_?
	elcom_astat: =1:FULL, =2:CLOSE, =3:MAYBE, =4:NONE
Return Value:
	0 if ElComp is successful, non-0 if there is an error
=======================================================================================
  7. ElCompFrElData
Purpose:
	 Returns comparison results between two elsets without loading the elsets into memory
	 See ElCompGetResults for a description of the input and output values.
Syntax: 
	void ElCompFrElData((in-Integer) checkDeltaTime, (in-Double[16]) xa_elcom_pri, (in-Double[16]) xa_elcom_sec, (out-Double[16]) xa_elcom_deltas, (out-Integer) elcom_astat)
Parameters: 
	checkDeltaTime: Supress=0/Allow=1: check on nodal time and sync long
	xa_elcom_pri: Primary satellite data   : 0:incli, 1:node, 2:E, 3:omega, 4: mean anomaly, 5:mean motion, 6:epoch.  see XA_ELCOM_?
	xa_elcom_sec: Secondary satellite data : 0:incli, 1:node, 2:E, 3:omega, 4: mean anomaly, 5:mean motion, 6:epoch.  see XA_ELCOM_?
	xa_elcom_deltas: Delta quantities between primary and secondary satellites.  see XA_ELCOM_?
	elcom_astat: =1:FULL, =2:CLOSE, =3:MAYBE, =4:not assoc
=======================================================================================
  8. ElCompFrElData_MT
Purpose:
	 This is a threa-safe version of ElCompFrElData
Syntax: 
	void ElCompFrElData_MT((in-Double[32]) xa_ecdiff, (in-Integer) checkDeltaTime, (in-Double[16]) xa_elcom_pri, (in-Double[16]) xa_elcom_sec, (out-Double[16]) xa_elcom_deltas, (out-Integer) elcom_astat)
Parameters: 
	xa_ecdiff: Array to store manual setting criteria for "FULL" (MAX1 parameters only).  See XA_ECDIFF_?
	checkDeltaTime: Supress=0/Allow=1: check on nodal time and sync long
	xa_elcom_pri: Primary satellite data   : 0:incli, 1:node, 2:E, 3:omega, 4: mean anomaly, 5:mean motion, 6:epoch.  see XA_ELCOM_?
	xa_elcom_sec: Secondary satellite data : 0:incli, 1:node, 2:E, 3:omega, 4: mean anomaly, 5:mean motion, 6:epoch.  see XA_ELCOM_?
	xa_elcom_deltas: Delta quantities between primary and secondary satellites.  see XA_ELCOM_?
	elcom_astat: =1:FULL, =2:CLOSE, =3:MAYBE, =4:not assoc
=======================================================================================
  9. ElCompResetCriteria
Purpose:
	 Resets criteria to default values for ElComp 
Syntax: 
	void ElCompResetCriteria()
Parameters: 
	None
=======================================================================================
 10. CocoSetCriteria
Purpose:
	 Sets up criteria for Coco 
	 See CocoGetCriteria for a description of the input and output values.
Syntax: 
	void CocoSetCriteria((in-Double[32]) xa_ecdiff)
Parameters: 
	xa_ecdiff: Array to set the Coco criteria.  see XA_ECDIFF_?
=======================================================================================
 11. CocoGetCriteria
Purpose:
	 Retrieves criteria settings for Coco
	 
	 Order of elements in the input xa_ecdiff array:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	  0  inclination difference criteria for SAME evaluation, [degrees]
	  1  inclination difference criteria for CLOSE evaluation, [degrees]
	  2  inclination difference criteria for NEARBY evaluation, [degrees]
	  3  w Angular Momentum Vector dot product criteria for SAME evalutation, [degrees]
	  4  w Angular Momentum Vector dot product criteria for CLOSE evalutation, [degrees]
	  5  w Angular Momentum Vector dot product criteria for NEARBY evalutation, [degrees]
	  6  Perigee height difference criteria for SAME evaluation, [kilometers]
	  7  Perigee height difference criteria for CLOSE evaluation, [kilometers]
	  8  Perigee height difference criteria for NEARBY evaluation, [kilometers]
	  9  Eccentricity difference criteria for SAME evaluation
	 10  Eccentricity difference criteria for CLOSE evaluation
	 11  Eccentricity difference criteria for NEARBY evaluation
	 12  Period difference criteria for SAME evaluation
	 13  Period difference criteria for CLOSE evaluation
	 14  Period difference criteria for NEARBY evaluation
	 15  Argument of Perigee difference criteria for SAME evaluation
	 16  Argument of Perigee difference criteria for CLOSE evaluation
	 17  Argument of Perigee difference criteria for NEARBY evaluation
	 18-31  unused at this time
	    
Syntax: 
	void CocoGetCriteria((out-Double[32]) xa_ecdiff)
Parameters: 
	xa_ecdiff: Array to receive the Coco criteria.  see XA_ECDIFF_?
=======================================================================================
 12. CocoGetResults
Purpose:
	   CocoGetResults executes COCO, Computation of coplanar Orbits, to evaluate two element sets
	   loaded via their satKeys.   
	 COCO software description:
	   CocoGetResults executes COCO, Computation of coplanar Orbits, to evaluate two element sets
	   loaded via their satKeys.   
	 COCO algortihm:
	   A primary element set is compared to a secondary element set using criteria summarized
	   above. The program uses data from standard two-line element sets (TLEs) as input.  The COCO
	   program was modified to allow for nodal crossing time comparison when the input element sets
	   are not at the node, and thereby addresses various inherent Keplerian orbital-element
	   comparison difficulties by accounting for nodal-crossing time differences between primary
	   and secondary element sets which are rarely epoched to the time of nodal crossing. COCO
	   uses inclination, right ascension of ascending node, perigee height, eccentricity, period,
	   argument of perigee, and nodal crossing time (via dot product between the primary and secondary
	   angular momentum vectors), to evaluate the degree of coplanarness between a primary and 
	   secondary element set in terms of their relative size, shape, and orientation.  COCO 
	   computes a correction, due to drag, to the nodal crossing time for each elset as part of 
	   the nodal cross time-difference evaluation.
	 INPUTS include:
	   (a) Primary element set to compare
	   (b) Secondary element set to be compared against
	   (c) Specified orbital element threshold values for SAME, CLOSE, and NEARBY coplanar
	       definitions. Specified orbital element thresholds include:
	         inclination
	         plane
	         perigee height
	         eccentricity
	         period
	         argument of perigee 
	 OUTPUTS include:
	   (a) Evaluation results of SAME, CLOSE, NEARBY, or NO MATCH for each primary-secondary element
	       set pair
	   (b) Special advisories for comparisons that evaluate to:
	         SUSTAINED CLOSE APPROACH POSSIBLE
	         POSSIBLE CONSTELLATION MEMBER
	         RIGHT ASCENSION OF ASCENDING NODE DIFFERENCE WILL BE 0.0 WITHIN 60 DAYS (along with the
	         estimated number of days to 0.0 degrees nodal nodal crossing difference)
Syntax: 
	int CocoGetResults((in-Long) priSatKey, (in-Long) secSatKey, (out-Double[16]) xa_satData_pri, (out-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco, (out-Integer) coco_astat)
Parameters: 
	priSatKey: The primary satellite's unique key
	secSatKey: The secondary satellite's unique key
	xa_satData_pri: Primary satellite data (see order below).  see XA_SATDATA_?
	xa_satData_sec: Secondary satellite data (see order below).  see XA_SATDATA_?
	xa_coco: Primary v.secondary delta quantities (see below).  see XA_COCO_?
	coco_astat: =1:SAME, =2:CLOSE, =5:not assoc
Return Value:
	0 if Coco is successful, non-0 if there is an error
=======================================================================================
 13. CocoGetResults_MT
Purpose:
	 This is a thread-safe version of CocoGetResults
Syntax: 
	int CocoGetResults_MT((in-Double[32]) xa_ecdiff, (in-Long) priSatKey, (in-Long) secSatKey, (out-Double[16]) xa_satData_pri, (out-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco, (out-Integer) coco_astat)
Parameters: 
	xa_ecdiff: Array to store manual setting criteria for "FULL" (MAX1 parameters only).  See XA_ECDIFF_?
	priSatKey: The primary satellite's unique key
	secSatKey: The secondary satellite's unique key
	xa_satData_pri: Primary satellite data (see order below).  see XA_SATDATA_?
	xa_satData_sec: Secondary satellite data (see order below).  see XA_SATDATA_?
	xa_coco: Primary v.secondary delta quantities (see below).  see XA_COCO_?
	coco_astat: =1:SAME, =2:CLOSE, =5:not assoc
Return Value:
	0 if Coco is successful, non-0 if there is an error
=======================================================================================
 14. CocoGetResultsWOA
Purpose:
	   CocoGetResultsWOA executes COCO, Computation of coplanar Orbits, to evaluate two element sets
	   loaded via their satKeys. It's similar to CocoGetResults but without returning the ASTAT value
Syntax: 
	int CocoGetResultsWOA((in-Long) priSatKey, (in-Long) secSatKey, (out-Double[16]) xa_satData_pri, (out-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco)
Parameters: 
	priSatKey: The primary satellite's unique key
	secSatKey: The secondary satellite's unique key
	xa_satData_pri: Primary satellite data (see order below).  see XA_SATDATA_?
	xa_satData_sec: Secondary satellite data (see order below).  see XA_SATDATA_?
	xa_coco: Primary v.secondary delta quantities (see below).  see XA_COCO_?
Return Value:
	0 if Coco is successful, non-0 if there is an error
=======================================================================================
 15. CocoFrElData
Purpose:
	 Returns comparison results between two elsets without loading the elsets into TLE dll
Syntax: 
	void CocoFrElData((in-Double[16]) xa_satData_pri, (in-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco, (out-Integer) coco_astat)
Parameters: 
	xa_satData_pri: Primary sat data, see XA_SATDATA_? for array arrangement
	xa_satData_sec: Secondary sat data.  see XA_SATDATA_?
	xa_coco: Delta quantities between pri/sec satellites, see XA_COCO_? for array arrangement
	coco_astat: Resulting astat value; 1=SAME, 2=CLOSE, 3=NEARBY, 5=NONE
=======================================================================================
 16. CocoFrElData_MT
Purpose:
	 This is a thread-safe version of CocoFrElData
Syntax: 
	void CocoFrElData_MT((in-Double[32]) xa_ecdiff, (in-Double[16]) xa_satData_pri, (in-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco, (out-Integer) coco_astat)
Parameters: 
	xa_ecdiff: Array to store manual setting criteria for "FULL" (MAX1 parameters only).  See XA_ECDIFF_?
	xa_satData_pri: Primary sat data, see XA_SATDATA_? for array arrangement
	xa_satData_sec: Secondary sat data.  see XA_SATDATA_?
	xa_coco: Delta quantities between pri/sec satellites, see XA_COCO_? for array arrangement
	coco_astat: Resulting astat value; 1=SAME, 2=CLOSE, 3=NEARBY, 5=NONE
=======================================================================================
 17. CocoFrElDataWOA
Purpose:
	 Returns comparison results between two elsets without loading the elsets into TLE dll. It's similar to CocoFrElData but without returning the ASTAT value
Syntax: 
	void CocoFrElDataWOA((in-Double[16]) xa_satData_pri, (in-Double[16]) xa_satData_sec, (out-Double[16]) xa_coco)
Parameters: 
	xa_satData_pri: Primary sat data, see XA_SATDATA_? for array arrangement
	xa_satData_sec: Secondary sat data, see XA_SATDATA_? for array arrangement
	xa_coco: Delta quantities between pri/sec satellites, see XA_COCO_? for array arrangement
=======================================================================================
 18. CocoResetCriteria
Purpose:
	 Resets criteria to default values for Coco 
Syntax: 
	void CocoResetCriteria()
Parameters: 
	None
=======================================================================================



