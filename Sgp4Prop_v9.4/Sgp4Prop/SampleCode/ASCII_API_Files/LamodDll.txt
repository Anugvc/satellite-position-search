  1. LamodInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes Lamod dll for use in the program
	 If this function returns an error, it is recommended that the users stop the program immediately. The error occurs if the users forget to load and initialize all the prerequisite DLLs, as listed in the DLL Prerequisite section, before using this DLL.
Syntax: 
	int LamodInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit()
Return Value:
	0 if Lamod.dll is initialized successfully, non-0 if there is an error
=======================================================================================
  2. LamodGetInfo
Purpose:
	 Returns information about the current version of Lamod.dll. The information is placed in the string parameter you pass in
	 The returned string provides information about the version number, build date, and the platform of the Lamod DLL. 
Syntax: 
	void LamodGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about Lamod.dll.
=======================================================================================
  3. LamodLoadFile
Purpose:
	 Loads Lamod-related parameters (1P/2P/3P cards, and Lamod parameter free format) from an input text file
	 Returns zero indicating the file has been read successfully. Other values indicate an error.
Syntax: 
	int LamodLoadFile((in-Character[512]) lamodInputFile)
Parameters: 
	lamodInputFile: The name of the file containing Lamod-related parameters
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  4. LamodLoadFileAll
Purpose:
	 Loads Lamod control parameters and all Lamod related data (environment, time, elsets, sensors) from an input text file
Syntax: 
	int LamodLoadFileAll((in-Character[512]) lamodInputFile)
Parameters: 
	lamodInputFile: The name of the file containing Lamod control parameters and all Lamod related data
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  5. LamodLoadCard
Purpose:
	 Loads a single Lamod-typed card
Syntax: 
	int LamodLoadCard((in-Character[512]) card)
Parameters: 
	card: Lamod-type input card
Return Value:
	0 if the input card is read successfully, non-0 if there is an error
=======================================================================================
  6. LamodSaveFile
Purpose:
	 Saves any currently loaded Lamod-related settings to a file
	 The purpose of this function is to save the current Lamod-related settings, usually used in GUI applications, for future use.
Syntax: 
	int LamodSaveFile((in-Character[512]) lamodFile, (in-Integer) saveMode, (in-Integer) saveForm)
Parameters: 
	lamodFile: The name of the file in which to save the settings
	saveMode: Specifies whether to create a new file or append to an existing one (0 = create, 1= append)
	saveForm: Specifies the mode in which to save the file (0 = text format, 1 = not yet implemented, reserved for future)
Return Value:
	0 if the data is successfully saved to the file, non-0 if there is an error
=======================================================================================
  7. LamodGetNumOfSensSats
Purpose:
	 Returns number of sensors/satellites entered via 1P/2P cards
	 See LamodGetSenNums for example.
Syntax: 
	void LamodGetNumOfSensSats((out-Integer) numSens, (out-Integer) numSats)
Parameters: 
	numSens: The number of sensors that were entered via 1P/2P cards
	numSats: Number of satellites that were entered via 1P/2P cards
=======================================================================================
  8. LamodGetSenNums
Purpose:
	 Retrieves all of the input sensor numbers that were entered via 1P-card  (column 38-44), 2P-card, or Lamod parameter free format (SENNO=)
Syntax: 
	void LamodGetSenNums((out-Integer[*]) senNums)
Parameters: 
	senNums: The array in which to store the list of input sensors that were entered via 1P/2P cards or Lamod parameter free format
=======================================================================================
  9. LamodGetSatNums
Purpose:
	 Retrieves all of the input satellite numbers that were entered via 1P-card (column 40-62), 2P-card, or Lamod parameter free format (SATNO=)
	 See LamodGetSenNums for example.
Syntax: 
	void LamodGetSatNums((out-Integer[*]) satNums)
Parameters: 
	satNums: The array in which to store the list of input satellites that were entered via 1P/2P cards or Lamod parameter free format
=======================================================================================
 10. LamodGet1pCard
Purpose:
	 Builds and returns the Lamod parameter card (1P-Card) from the current Lamod settings
Syntax: 
	void LamodGet1pCard((out-Character[512]) lamod1PCard)
Parameters: 
	lamod1PCard: The resulting Lamod 1P card
=======================================================================================
 11. LamodGet1pAll
Purpose:
	 Retrieves all Lamod control parameters with a single function call
Syntax: 
	void LamodGet1pAll((out-Integer) timeFlg, (out-Double) startTime, (out-Double) stopTime, (out-Double) interval, (out-Integer) prtOpt, (out-Integer) punchObs, (out-Integer) visFlg, (out-Integer) stepMode, (out-Character) schedMode, (out-Integer) diagMode, (out-Double) solAspAngle)
Parameters: 
	timeFlg: Time format:0 = minutes since epoch (MSE), 1 = days since 1950, UTC
	startTime: Begin time in ds50UTC or MSE depending on timeFlg
	stopTime: End time  in ds50UTC or MSE depending on timeFlg
	interval: Output interval (min)
	prtOpt: Print options
	punchObs: Flag to generate obs from look angles: 0=Do not form obs, 1=Form B3 obs from look angles, 2=Form TTY obs from look angles
	visFlg: Optical visibility flag:	0=Accept all passes, 1=Accept optically visual pass only, 2=Same as 1 w/ SAA restrictions, 3=For IR sensors, 9=Use sensor's limits record
	stepMode: Step mode flag: 0= use culmination mode, 1= use step mode, 2= use task mode
	schedMode: Processing mode:'O' = OBSCHED mode (all sensors vs all sats), 'P' = PASCHED mode (all satellites vs all sensors)
	diagMode: Pass by pass diagnostic flag: 0=None, 1=Print sensor/sat position at each look, 2=Print pass-by-pass diagnostics, 3=1+2 combined
	solAspAngle: Max solar aspect angle (deg) for optical sites
=======================================================================================
 12. LamodSet1pAll
Purpose:
	 Sets all Lamod control parameters with a single function call
	 The values of visFlg have been changed to match those of sensor limits. VisFlg = 9 now means using limits record value (from V5.4.2 and earlier versions, this used to be visFlg = 0).
	 
	 There are cases when the program switches to step mode even though the users have requested culmination mode:
	 
	 When the sensor is an orbiting sensor
	 When the target satellite orbit has large period (> 960 minutes)
	 When the last pass's culmination time passes the requested stopTime (culmination time == 0 and setTime == 0)
	 When a pass has multiple maximum elevations (culmination time == -1.0)
	 
Syntax: 
	void LamodSet1pAll((in-Integer) timeFlg, (in-Double) startTime, (in-Double) stopTime, (in-Double) interval, (in-Integer) prtOpt, (in-Integer) punchObs, (in-Integer) visFlg, (in-Integer) stepMode, (in-Character) schedMode, (in-Integer) diagMode, (in-Double) solAspAngle)
Parameters: 
	timeFlg: Time format:0 = minutes since epoch (MSE), 1 = days since 1950, UTC
	startTime: Begin time in ds50UTC or MSE depending on timeFlg
	stopTime: End time  in ds50UTC or MSE depending on timeFlg
	interval: Output interval (min)
	prtOpt: Print options
	punchObs: Flag to generate obs from look angles: 0=Do not form obs, 1=Form B3 obs from look angles, 2=Form TTY obs from look angles
	visFlg: Optical visibility flag:	0=Accept all passes, 1=Accept optically visual pass only, 2=Same as 1 w/ SAA restrictions, 3=For IR sensors, 9=Use sensor's limits record
	stepMode: Step mode flag: 0= use culmination mode, 1= use step mode, 2= use task mode
	schedMode: Processing mode:'O' = OBSCHED mode (all sensors vs all sats), 'P' = PASCHED mode (all satellites vs all sensors)
	diagMode: Pass by pass diagnostic flag: 0=None, 1=Print sensor/sat position at each look, 2=Print pass-by-pass diagnostics, 3=1+2 combined
	solAspAngle: Max solar aspect angle (deg) for optical sites
=======================================================================================
 13. LamodGet1pField
Purpose:
	 Retrieves the value of a specified Lamod control parameter (1P-card field) 
	 
	 Remember to convert valueStr to the correct data type that it represents.
	 
	 The table below shows the values for the xf_1P parameter:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	 1   Input time format : 0: Minutes since epoch, 1: UTC
	 2   Begin time
	 3   End time
	 4   Ouput interval
	 5   Print options: 0: print look angles, 1: print look angle and initial conditions
	 6   Generate obs from look angles flag
	 7   Compute optical visibility flag: 0: use limits record value, 1: output optically visible passes only,
	 2: output pass only if solar aspect angle 
	 8   Step mode flag: 0: use culmination mode; 1: use step mode
	 9   Processing mode: 'O': obsched mode; 'P':P ASCHED mode
	 10  Diagnostic mode: 0: none, 1: print sensor/sat position at each look, 2: print pass by pass diagnostics,
	 3: both 1 and 2
	 11  Max solar aspect for optical sites   
	 	
Syntax: 
	void LamodGet1pField((in-Integer) xf_1P, (out-Character[512]) retVal)
Parameters: 
	xf_1P: Predefined number specifying which Lamod control parameter  to retrieve
	retVal: A string to hold the value of the requested Lamod parameter
=======================================================================================
 14. LamodSet1pField
Purpose:
	 Sets the value of a specified Lamod control parameter (1P-card field)
	 See LamodGet1pField for description of the xf_1P parameter values.
Syntax: 
	void LamodSet1pField((in-Integer) xf_1P, (in-Character[512]) valueStr)
Parameters: 
	xf_1P: Predefined number specifying which Lamod control parameter to set
	valueStr: The new value of the specified field, expressed as a string
=======================================================================================
 15. LamodGet3pAll
Purpose:
	 Retrieves the concurrent viewing options read from the input 3P Parameter card
	 The concurrent viewing implementation is used to be totally in the LamodDll.dll. Now, the Lamod library provides the users the capability to implement the concurrent viewing from their driver programs. There is no limit on the number of satellites/sensors being use in concurrent viewing in the new library.
Syntax: 
	void LamodGet3pAll((out-Integer) concurrFlg, (out-Integer[3]) concurrSens)
Parameters: 
	concurrFlg: Concurrent view option: 0=Normal looks (1 sen + 1 sat), 1/4=2 or 3 sens viewing the same target sat, 2/3=1 orbiting sen viewing the target sat as 2nd/3rd site(s) viewing the orbiting sen
	concurrSens: Concurrent sensor numbers (maximum 3 sensors)
=======================================================================================
 16. LamodSet3pAll
Purpose:
	 Sets concurrent viewing options similar to what is entered in the input 3P Parameter card
	 The concurrent viewing implementation is used to be totally in the LamodDll.dll. Now, the Lamod library provides the users the capability to implement the concurrent viewing from their driver programs. There is no limit on the number of satellites/sensors being use in concurrent viewing in the new library.
Syntax: 
	void LamodSet3pAll((in-Integer) concurrFlg, (in-Integer[3]) concurrSens)
Parameters: 
	concurrFlg: Concurrent view option: 0=Normal looks (1 sen + 1 sat), 1/4=2 or 3 sens viewing the same target sat, 2/3=1 orbiting sen viewing the target sat as 2nd/3rd site(s) viewing the orbiting sen
	concurrSens: Concurrent sensor numbers (maximum 3 sensors)
=======================================================================================
 17. LamodGetObsFileName
Purpose:
	 Returns the full file name of the output obs file that was specified using "OBSOUT = " in the main input file or using the LamodSetObsFileName() function call
	 The users need to make sure they have turned on the flag to generate obs from look angles. Otherwise, this function will return an empty string to the obsFile.
Syntax: 
	void LamodGetObsFileName((out-Character[512]) obsFile)
Parameters: 
	obsFile: The output obs file name
=======================================================================================
 18. LamodSetObsFileName
Purpose:
	 Sets the full file name of the output obs file which will be used to store the generated obs data
	 Another way to set the output obs file name is entering "OBSOUT = obsFileName" in the input file. 
	 
	 The users need to make sure they have also turned on the flag to generate obs from look angles.
Syntax: 
	void LamodSetObsFileName((in-Character[512]) obsFile)
Parameters: 
	obsFile: The new output obs file name
=======================================================================================
 19. LamodSenSatVisible
Purpose:
	 Checks to see whether the input satellite will ever be viewable to the input sensor
	 This function is for the initial visibility check which screens out sensors that can't possibly acquire the satellite. Internally, the LamodInitSenSat() also calls this function to do the screening.
	 
	 If the satellite is an EXTEPHEM (see External Ephemerides document), it will always pass this visibility check (assume the satellite is viewable to the sensor).
Syntax: 
	int LamodSenSatVisible((in-Long) senKey, (in-Long) satKey)
Parameters: 
	senKey: The sensor's unique key (sensor number)
	satKey: The satellite's unique key
Return Value:
	1 if the input satellite is viewable to the input sensor, 0 if not
=======================================================================================
 20. LamodInitSenSat
Purpose:
	 Initializes a sensor/satellite pair in preparation for computing look angles
	 It's a good practice to initialize the satellite (SatState.SatStateInitSat) before calling this routine.
	 
	 The users need to call this routine only once for each sensor/satellite pair they want to compute the look angles. The function however can be called again when the sensor and/or the satellite data is changed.
	 
	 Internally, this function does the initial visibility check to see if the sensor can possibly acquire the satellite. However, if the satellite is an EXTEPHEM (see External Ephemerides document), it will always pass this visibility check (assume the satellite is viewable to the sensor).
Syntax: 
	__int64 LamodInitSenSat((in-Long) senKey, (in-Long) satKey)
Parameters: 
	senKey: The sensor's unique key (sensor number)
	satKey: The satellite's unique key
Return Value:
	Returns a senSatKey: gt 0: Success, = 0: Warning, lt 0: Error
=======================================================================================
 21. LamodInitSenSat_MT
Purpose:
	 Initializes a sensor/satellite pair in preparation for computing look angles using its own LAMOD parameters - suitable for multithread application
	 This function is similar to LamodInitSenSat but allows the user to enter separate LAMOD parameters for each call which is suitable for multithread application
	 It's a good practice to initialize the satellite (SatState.SatStateInitSat) before calling this routine.
	 
	 The users need to call this routine only once for each sensor/satellite pair they want to compute the look angles. The function however can be called again when the sensor and/or the satellite data is changed.
	 
	 Internally, this function does the initial visibility check to see if the sensor can possibly acquire the satellite. However, if the satellite is an EXTEPHEM (see External Ephemerides document), it will always pass this visibility check (assume the satellite is viewable to the sensor).
Syntax: 
	__int64 LamodInitSenSat_MT((in-Double[16]) xa_la_parms, (in-Long) senKey, (in-Long) satKey)
Parameters: 
	xa_la_parms: LAMOD control parameters - see XA_LA_PARMS_? for array arrangement
	senKey: The sensor's unique key (sensor number)
	satKey: The satellite's unique key
Return Value:
	Returns a senSatKey: gt 0: Success, = 0: Warning, lt 0: Error
=======================================================================================
 22. LamodGetSenSatDataAll
Purpose:
	 Retrieves all of the data for an initialized sensor/satellite pair with a single function call
Syntax: 
	int LamodGetSenSatDataAll((in-Long) senSatKey, (out-Integer) stepMode, (out-Integer) optVisFlg, (out-Double) startDs50TAI, (out-Double) stopDs50TAI, (out-Double) interval, (out-Double) period)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	stepMode: Step mode flag: 0= use culmination mode, 1= use step mode, 2= use task mode
	optVisFlg: Optical visibility flag
	startDs50TAI: Start time in ds50TAI
	stopDs50TAI: Stop time in ds50TAI
	interval: Output interval (min)
	period: Satellite's period (min)
Return Value:
	0 if the computation data is retrieved successfully, non-0 if there is an error
=======================================================================================
 23. LamodGetSenSatDataField
Purpose:
	 Retrieves an individual field of data for an initialized sensor/satellite pair
	 
	 Remember to convert valueStr to the correct data type that it represents.
	 
	 The table below shows the values for the xf_SenSat parameter:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	  1  Step mode
	  2  Optical visibility flag
	  3  Begin time in ds50TAI
	  4  End time in ds50TAI
	  5  Print interval 
	  6  Satellite's period
	 
Syntax: 
	int LamodGetSenSatDataField((in-Long) senSatKey, (in-Integer) xf_SenSat, (out-Character[512]) retVal)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	xf_SenSat: Predefined number specifying which data field to retrieve
	retVal: A string to contain the value of the requested field
Return Value:
	0 if the data is successfully retrieved, non-0 if there is an error
=======================================================================================
 24. LamodSenSatDataToArray
Purpose:
	 Retrieves all data fields belonging to the sensor/satellite pair via its senSatKey and store them in the passing array xa_senSat
Syntax: 
	int LamodSenSatDataToArray((in-Long) senSatKey, (out-Double[32]) xa_senSat)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	xa_senSat: Array containing sensor/satellite data fields, see XA_SENSAT_? for array arrangement
Return Value:
	0 if the sensor/satellite data is retrieved successfully, non-0 if there is an error
=======================================================================================
 25. LamodGetNumPasses
Purpose:
	 Returns the number of possible passes of the sensor/satellite pair in the requested time span which pass 
	 the horizontal limit test. This function only applies when the culmination mode was selected
	 This is an estimated number of passes. Each pass might not return any valid look angles due to the sensor limits settings.
Syntax: 
	int LamodGetNumPasses((in-Long) senSatKey)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
Return Value:
	The number of possible passes. Special values: -1: The senSatKey is invalid, 0: culmination mode wasn't selected
=======================================================================================
 26. LamodGetRiseCulmSetTimes
Purpose:
	 Returns an array of rise, culmination, and set times of all possible passes of a sensor/satellite pair during the requested time span
	 See LamodGetNumPasses for example.
	 If a possible culmination time of the last pass is after the requested stop time, only the rise time is returned. The culmination and set times are set to zeros. Since there is no culmination time in this case, the host program should switch to step mode to compute look angles.
	 There are cases when multiple maximum elevations are detected in one pass. In these cases, the culmination times will be set to -1.0. The users need to check for this condition and switch to step mode.
	 For external ephemeris files, if the provided ephemerides don't cover the requested time span, the possible rise and set times will not be available and will be set to -1.0.
	 Note: For Fence/Fan typed sensors this function returns enter/penetration-cross/exit times in place of rise/culmination/set times
Syntax: 
	int LamodGetRiseCulmSetTimes((in-Long) senSatKey, (out-Double[*, 3]) rcsTimeArr)
Parameters: 
	senSatKey: Sensor/satellite pair's unique key
	rcsTimeArr: Array of rise/culmination/set times in days since 1950 TAI of the possible passes
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 27. LamodComputeLookAngle
Purpose:
	 Computes a single look angle of the sensor/satellite pair at the specified time
Syntax: 
	int LamodComputeLookAngle((in-Long) senSatKey, (in-Double) currDs50TAI, (out-Integer) lookCode, (out-Double[6]) xa_look, (out-Double[9]) senElts, (out-Double[9]) satElts)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	currDs50TAI: Time, in ds50TAI, for which to compute the look angle
	lookCode: LookCode: 0=valid look; 1=Fail horizon break test; 2=Fail sensor's limit tests
	xa_look: Look output data, see XA_LOOK_? for array arrangement
	senElts: Sensor's state (ECI TEME of Date): position (1st-3rd), velocity (4th-6th), llh (7th-9th)
	satElts: Satellite's state (ECI TEME of Date): position (1st-3rd), velocity (4th-6th), llh (7th-9th)
Return Value:
	0 if the look angle is computed successfully, non-0 if there is an error
=======================================================================================
 28. LamodComputeLookView
Purpose:
	 Computes at once look and view data of the sensor/satellite pair at the specified time
	 
	 Note: This function is a thread safe alternative to LamodComputeLookAngle(), LamodGetOrbSenViewdata(), and LamodGetViewDataField()
Syntax: 
	int LamodComputeLookView((in-Long) senSatKey, (in-Double) currDs50TAI, (out-Double[128]) xa_lv)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	currDs50TAI: Time, in ds50TAI, for which to compute the look angle
	xa_lv: The array that stores resulting look and view data, see XA_LV_? for array arrangement
Return Value:
	0 if the look angle is computed successfully, non-0 if there is an error
=======================================================================================
 29. LamodFindExactIOTime
Purpose:
	 Finds exact time when satellite is IN or OUT of sensor's coverage
	 
	 Note: The start and end times must have different look values (valid and invalid looks or vice versa)
Syntax: 
	double LamodFindExactIOTime((in-Long) senSatKey, (in-Double) t1Ds50TAI, (in-Double) t2Ds50TAI)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	t1Ds50TAI: The bracket start time when satellite changes its coverage status, in ds50TAI
	t2Ds50TAI: The bracket end time when satellite changes its coverage status, in ds50TAI
Return Value:
	The exact time when satellite is IN or OUT of sensor's coverage (= 0 if none exists)
=======================================================================================
 30. LamodGetOrbSenViewdata
Purpose:
	 Returns viewing and geometric data for orbiting sensors
	 
	 Note: This function is not thread safe, please use LamodComputeLookView() instead   
Syntax: 
	int LamodGetOrbSenViewdata((in-Long) senSatKey, (out-Double[3]) uvSun, (out-Double[3]) uvMoon, (out-Double[5]) xa_angle, (out-Integer) nBore1, (out-Integer) nBore2, (out-Double[4]) xa_offBore)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	uvSun: Unit vector to the sun
	uvMoon: Unit vector to the moon
	xa_angle: Array of various angle data, see XA_ANGLE_? for array arrangement
	nBore1: Orbiting sensor boresight vector (U, V, W) for limits interval #1
	nBore2: Orbiting sensor boresight vector (U, V, W) for limits interval #2
	xa_offBore: Array of off-boresight angle data, see XA_OFFBORE_? for array arrangement
Return Value:
	0 if the viewing data is retrieved successfully, non-0 if there is an error
=======================================================================================
 31. LamodGetViewDataField
Purpose:
	 Retrieves a single field of look angle viewing data
	 
	 See LamodCompRaDec for an example.
	 
	 Note: This function is not thread safe, please use LamodComputeLookView() instead    
	 
	 When the users pass the retArray to this function, make sure it has the proper size as shown in the retArray size column.
	 
	 The retArray Arrangement column lists the order of the elements in the array. It is not necessarily the subscript of the element in the array since this is language-dependent. For example, in C/C++ the first element in every array is the zero-subscripted element.
	 
	 The table below shows the values for the xf_View parameter:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	  1  computed U-vector to object
	  2  range unit vector
	  3  topocentric L unit vector
	  4  station zenith vector
	  5  computed range vector (km)
	  6  computed range-rate vector/relative velocity vector (er/kem)
	  7  vector to sun  (km)
	  8  vector to moon (km)
	  9  angle array (1:moon/sen/sat, 2:sun/earth/sat, 3:sun/earth/sen, 4:sun/sen/sat, 5:solar aspect
	 angle)
	 10  illumination result
	 11  Relative velocity (km/sec)
	 12  sensor position EFG
	 13  limit check flags
	 14  azimuth and elevation rates (deg/sec)
	 15  moon angles (1:moon/earth/sat in deg, 2:moon/earth/sen in deg)
	 	
	 
	 The table below shows the values for the limit check flags (xf_View = 13):
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	   0 az limits test flag
	   1 el limits test flag
	   2 earth in background flag
	   3 earth obstructed flag
	   4 lunar exclusion angle fl
	   5 max range test flag
	   6 min range test flag
	   7 penumb eclipse test flag
	   8 relative velocity test fl
	   9 solar aspect angle test
	  10 solar exclusion angle fl
	  11 umbral eclipse test flag
	 	
Syntax: 
	int LamodGetViewDataField((in-Long) senSatKey, (in-Integer) xf_View, (out-Double[*]) retVal)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	xf_View: Predefined value specifying which field to retrieve
	retVal: An array to store the retrieved result
Return Value:
	0 if the viewing data is retrieved successfully, non-0 if there is an error
=======================================================================================
 32. LamodCompRaDec
Purpose:
	 Computes right-ascension and declination from the input sensor's range unit vector (also called local horizon vector)
	 The users need to be careful when -1 < decDeg < 0 because they might easily display it incorrectly (missing the negative sign of its value).
Syntax: 
	void LamodCompRaDec((in-Double[3]) xlPos, (out-Double) rasc, (out-Double) decl, (out-Integer) raHr, (out-Integer) raMin, (out-Double) raSec, (out-Integer) decDeg, (out-Integer) decMin, (out-Double) decSec)
Parameters: 
	xlPos: Sensor local horizon vector (range unit vector)
	rasc: Computed right ascension (deg)
	decl: Computed declination (deg)
	raHr: Right-ascension hour
	raMin: Right-ascension minute
	raSec: Right-ascension second
	decDeg: Declination hour
	decMin: Declination minute
	decSec: Declination second
=======================================================================================
 33. LamodGenObs
Purpose:
	 Retrieves the formatted observation strings, either in B3 or transmission format, generated from the most recent look angle data
	 Note: This function is not thread safe, please use LamodGenObsAtTime() instead 
	 The function returns one-line or two-line formatted obs string depending on the input punchObs and the sensor's observation type.  The users need to check the returned value of numLines to see what type of the output strings they are.
Syntax: 
	int LamodGenObs((in-Long) senSatKey, (in-Integer) punchObs, (in-Character) obsClass, (out-Character[512]) obsLine1, (out-Character[512]) obsLine2, (out-Integer) numLines)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	punchObs: Generate obs from look angles flag: 1/11=Form B3 obs, 2/12=Form transmission, 3/13=SP Tasker (11/12/13 is for LTC), 4=CSV format
	obsClass: Input character specifying the classification of the generated obs
	obsLine1: First line of the formatted obs strings
	obsLine2: Second line, if available, of the formatted obs strings
	numLines: Number of lines of the output strings
Return Value:
	0 if the generated obs strings are retrieved successfully, non-0 if there is an error
=======================================================================================
 34. LamodGenObsAtTime
Purpose:
	 Generates formatted observation strings, either in B3 or transmission format, from a VALID look angle obtained at the requested time 
	 Note: This is a thread-safe version of the LamodGenObs
Syntax: 
	int LamodGenObsAtTime((in-Long) senSatKey, (in-Double) currDs50TAI, (in-Integer) punchObs, (in-Character) obsClass, (out-Character[512]) obsLine1, (out-Character[512]) obsLine2, (out-Integer) numLines)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
	currDs50TAI: Time, in ds50TAI, for which to compute the look angle
	punchObs: Generate obs from look angles flag: 1=Form B3 obs, 2=Form transmission, 3=SP Tasker, 4=CSV format
	obsClass: Input character specifying the classification of the generated obs
	obsLine1: First line of the formatted obs strings
	obsLine2: Second line, if available, of the formatted obs strings
	numLines: Number of lines of the output strings
Return Value:
	0 if the generated obs strings are retrieved successfully, non-0 if there is an error
=======================================================================================
 35. LamodRemoveSenSat
Purpose:
	 Removes a sensor/satellite pair from Lamod.dll's set of loaded sensor/satellite pairs
Syntax: 
	int LamodRemoveSenSat((in-Long) senSatKey)
Parameters: 
	senSatKey: The sensor/satellite pair's unique key
Return Value:
	0 if the sensor/satellite pair is removed successfully, non-0 if there is an error
=======================================================================================
 36. LamodRemoveAllSenSats
Purpose:
	 Removes all sensor/satellite pairs from Lamod.dll's set of sensor/satellite pairs
Syntax: 
	int LamodRemoveAllSenSats()
Parameters: 
	None
Return Value:
	0 if all sensor/satellite pairs are removed successfully, non-0 if there is an error
=======================================================================================
 37. LamodReset
Purpose:
	 Resets all Lamod-related parameters back to their default values
	 See LamodRemoveAllSenSats for example.
Syntax: 
	void LamodReset()
Parameters: 
	None
=======================================================================================
 38. LamodSenSatDirect_OS
Purpose:
	 Computes all look and view data of the input sensor/satellite at the specified time using their input data directly (no need to provide senSatKey)
	 
	 Note: This function doesn't check for sensor limits so all limit flags are returned as passed
	 
Syntax: 
	void LamodSenSatDirect_OS((in-Double) ds50TAI, (in-Double[16]) xa_locSen, (in-Double[6]) xa_pvSat, (out-Double[128]) xa_lv)
Parameters: 
	ds50TAI: Time, in ds50TAI, for which to compute the look angle
	xa_locSen: Input array contains sensor location data - different sensor location types can be used, see XA_LOCSEN_? for array arrangement
	xa_pvSat: Input array contains satellite's state data, see XA_PVSAT_? for array arrangement
	xa_lv: The array that stores resulting look and view data, see XA_LV_? for array arrangement
=======================================================================================



