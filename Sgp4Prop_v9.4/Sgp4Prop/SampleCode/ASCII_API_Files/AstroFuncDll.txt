  1. AstroFuncInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes AstroFunc DLL for use in the program.
	 If this function returns an error, it is recommended that you stop the program immediately.
	 
	 An error will occur if you forget to load and initialize all the prerequisite DLLs, as listed in the DLL Prerequisites section of the accompanying documentation, before using this DLL.
Syntax: 
	int AstroFuncInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit(). See the documentation for DllMain.dll for details.
Return Value:
	0 if AstroFunc.dll is initialized successfully, non-0 if there is an error.
=======================================================================================
  2. AstroFuncGetInfo
Purpose:
	 Retrieves information about the current version of AstroFunc.dll. The information is placed in the string parameter you pass in.
	 The returned string provides information about the version number, build date, and platform.
Syntax: 
	void AstroFuncGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about AstroFunc.dll.
=======================================================================================
  3. KepToEqnx
Purpose:
	 Converts a set of Keplerian elements to a set of equinoctial elements. 
Syntax: 
	void KepToEqnx((in-Double[6]) xa_kep, (out-Double[6]) xa_eqnx)
Parameters: 
	xa_kep: The set of Keplerian elements to be converted. see XA_KEP_?
	xa_eqnx: The resulting set of equinoctial elements. see XA_EQNX_?
=======================================================================================
  4. KepToPosVel
Purpose:
	 Converts a set of osculating Keplerian elements to osculating position and velocity vectors.
Syntax: 
	void KepToPosVel((in-Double[6]) xa_kep, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	xa_kep: The set of Keplerian elements to be converted. see XA_KEP_?
	pos: The resulting position vector.
	vel: The resulting velocity vector.
=======================================================================================
  5. KepToUVW
Purpose:
	 Converts a set of Keplerian elements to Ubar, Vbar, and Wbar vectors.
Syntax: 
	void KepToUVW((in-Double[6]) xa_kep, (out-Double[3]) uBar, (out-Double[3]) vBar, (out-Double[3]) wBar)
Parameters: 
	xa_kep: The set of Keplerian elements to be converted. see XA_KEP_?
	uBar: The resulting ubar vector.
	vBar: The resulting vbar vector.
	wBar: The resulting wbar vector.
=======================================================================================
  6. ClassToEqnx
Purpose:
	 Converts a set of classical elements to a set of equinoctial elements. 
Syntax: 
	void ClassToEqnx((in-Double[6]) xa_cls, (out-Double[6]) xa_eqnx)
Parameters: 
	xa_cls: The set of classical elements to be converted. see XA_CLS_?
	xa_eqnx: The resulting set of equinoctial elements. see XA_EQNX_?
=======================================================================================
  7. EqnxToClass
Purpose:
	 Converts a set of equinoctial elements to a set of classical elements.
Syntax: 
	void EqnxToClass((in-Double[6]) xa_eqnx, (out-Double[6]) xa_cls)
Parameters: 
	xa_eqnx: The set of equinoctial elements to be converted. see XA_EQNX_?
	xa_cls: The resulting set of classical elements. see XA_CLS_?
=======================================================================================
  8. EqnxToKep
Purpose:
	 Converts a set of equinoctial elements to a set of Keplerian elements. 
Syntax: 
	void EqnxToKep((in-Double[6]) xa_eqnx, (out-Double[6]) xa_kep)
Parameters: 
	xa_eqnx: The set of equinoctial elements to be converted. see XA_EQNX_?
	xa_kep: The resulting set of Keplerian elements. see XA_KEP_?
=======================================================================================
  9. EqnxToPosVel
Purpose:
	 Converts a set of equinoctial elements to position and velocity vectors.
Syntax: 
	void EqnxToPosVel((in-Double[6]) xa_eqnx, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	xa_eqnx: The set of equinoctial elements to be converted. see XA_EQNX_?
	pos: The resulting position vector.
	vel: The resulting velocity vector.
=======================================================================================
 10. PosVelToEqnx
Purpose:
	 Converts position and velocity vectors to a set of equinoctial elements.
Syntax: 
	void PosVelToEqnx((in-Double[3]) pos, (in-Double[3]) vel, (out-Double[6]) xa_eqnx)
Parameters: 
	pos: The position vector to be converted.
	vel: The velocity vector to be converted.
	xa_eqnx: The resulting set of equinoctial elements. see XA_EQNX_?
=======================================================================================
 11. PosVelMuToEqnx
Purpose:
	 Converts position and velocity vectors to a set of equinoctial elements with the given mu value. 
	 This function is used when working with the SP propagator to get a more accurate set of equinoctial elements.
Syntax: 
	void PosVelMuToEqnx((in-Double[3]) pos, (in-Double[3]) vel, (in-Double) mu, (out-Double[6]) xa_eqnx)
Parameters: 
	pos: The position vector to be converted.
	vel: The velocity vector to be converted.
	mu: The value of mu.
	xa_eqnx: The resulting set of equinoctial elements. see XA_EQNX_?
=======================================================================================
 12. PosVelToKep
Purpose:
	 Converts osculating position and velocity vectors to a set of osculating Keplerian elements.
Syntax: 
	void PosVelToKep((in-Double[3]) pos, (in-Double[3]) vel, (out-Double[6]) xa_kep)
Parameters: 
	pos: The position vector to be converted.
	vel: The velocity vector to be converted.
	xa_kep: The resulting set of Keplerian elements. see XA_KEP_?
=======================================================================================
 13. PosVelMuToKep
Purpose:
	 Converts osculating position and velocity vectors to a set of osculating Keplerian elements with the given value of mu.
	 This function is used when working with the SP propagator to get a more accurate set of Keplerian elements.
Syntax: 
	void PosVelMuToKep((in-Double[3]) pos, (in-Double[3]) vel, (in-Double) mu, (out-Double[6]) xa_kep)
Parameters: 
	pos: The position vector to be converted.
	vel: The velocity vector to be converted.
	mu: The value of mu.
	xa_kep: The resulting set of Keplerian elements. see XA_KEP_?
=======================================================================================
 14. PosVelToUUVW
Purpose:
	 Converts position and velocity vectors to U, V, W vectors. See the remarks section for details.
	 The resulting vectors have the following meanings.
	 U vector: along radial direction
	 V vector: W x U
	 W vector: pos x vel
Syntax: 
	void PosVelToUUVW((in-Double[3]) pos, (in-Double[3]) vel, (out-Double[3]) uvec, (out-Double[3]) vVec, (out-Double[3]) wVec)
Parameters: 
	pos: The position vector to be converted.
	vel: The velocity vector to be converted.
	uvec: The resulting U vector.
	vVec: The resulting V vector.
	wVec: The resulting W vector.
=======================================================================================
 15. PosVelToPTW
Purpose:
	 Converts position and velocity vectors to U, V, W vectors. See the remarks section for details.
	 The resulting vectors have the following meanings.
	 U vector: V x W
	 V vector: along velocity direction
	 W vector: pos x vel
Syntax: 
	void PosVelToPTW((in-Double[3]) pos, (in-Double[3]) vel, (out-Double[3]) uvec, (out-Double[3]) vVec, (out-Double[3]) wVec)
Parameters: 
	pos: The position vector.
	vel: The velocity vector.
	uvec: The resulting U vector.
	vVec: The resulting V vector.
	wVec: The resulting W vector.
=======================================================================================
 16. SolveKepEqtn
Purpose:
	 Solves Kepler's equation (M = E - e sin(E)) for the eccentric anomaly, E, by iteration.
Syntax: 
	double SolveKepEqtn((in-Double[6]) xa_kep)
Parameters: 
	xa_kep: The set of Keplerian elements for which to solve the equation. see XA_KEP_?
Return Value:
	The eccentric anomaly.
=======================================================================================
 17. CompTrueAnomaly
Purpose:
	 Computes true anomaly from a set of Keplerian elements.
Syntax: 
	double CompTrueAnomaly((in-Double[6]) xa_kep)
Parameters: 
	xa_kep: The set of Keplerian elements for which to compute true anomaly. see XA_KEP_?
Return Value:
	The true anomaly in degrees.
=======================================================================================
 18. NToA
Purpose:
	 Converts mean motion N to semi-major axis A.
Syntax: 
	double NToA((in-Double) n)
Parameters: 
	n: Mean motion N (revs/day).
Return Value:
	The semi-major axis A (km).
=======================================================================================
 19. AToN
Purpose:
	 Converts semi-major axis A to mean motion N.
Syntax: 
	double AToN((in-Double) a)
Parameters: 
	a: Semi-major axis A (km).
Return Value:
	The mean motion N (revs/day).
=======================================================================================
 20. KozaiToBrouwer
Purpose:
	 Converts Kozai mean motion to Brouwer mean motion.
	 SGP TLE's use Kozai mean motion while SGP4/SGP4-XP TLE's use Brouwer mean motion.
Syntax: 
	double KozaiToBrouwer((in-Double) eccen, (in-Double) incli, (in-Double) nKozai)
Parameters: 
	eccen: Eccentricity
	incli: Inclination (degrees)
	nKozai: Kozai mean motion (revs/day).
Return Value:
	Brouwer mean motion (revs/day).
=======================================================================================
 21. BrouwerToKozai
Purpose:
	 Converts Brouwer mean motion to Kozai mean motion.
	 SGP TLE's use Kozai mean motion while SGP4/SGP4-XP TLE's use Brouwer mean motion.
Syntax: 
	double BrouwerToKozai((in-Double) eccen, (in-Double) incli, (in-Double) nBrouwer)
Parameters: 
	eccen: Eccentricity
	incli: Inclination (degrees)
	nBrouwer: Brouwer mean motion (revs/day).
Return Value:
	Kozai mean motion (revs/day).
=======================================================================================
 22. KepOscToMean
Purpose:
	 Converts a set of osculating Keplerian elements to a set of mean Keplerian elements using method 9 algorithm.
Syntax: 
	void KepOscToMean((in-Double[6]) xa_OscKep, (out-Double[6]) xa_MeanKep)
Parameters: 
	xa_OscKep: The set of osculating Keplerian elements to be converted. see XA_KEP_?
	xa_MeanKep: The resulting set of mean Keplerian elements. see XA_KEP_?
=======================================================================================
 23. XYZToLLH
Purpose:
	 Converts an ECI position vector XYZ to geodetic latitude, longitude, and height.
Syntax: 
	void XYZToLLH((in-Double) thetaG, (in-Double[3]) metricPos, (out-Double[3]) metricLLH)
Parameters: 
	thetaG: ThetaG - Greenwich mean sidereal time (rad).
	metricPos: The ECI (TEME of Date) position vector (km) to be converted.
	metricLLH: The resulting geodetic north latitude (degree), east longitude(degree), and height (km).
=======================================================================================
 24. XYZToLLHTime
Purpose:
	 Converts an ECI position vector XYZ to geodetic latitude, longitude, and height at the specified time.
Syntax: 
	void XYZToLLHTime((in-Double) ds50UTC, (in-Double[3]) metricPos, (out-Double[3]) metricLLH)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	metricPos: The ECI (TEME of Date) position vector (km) to be converted.
	metricLLH: The resulting geodetic north latitude (degree), east longitude(degree), and height (km).
=======================================================================================
 25. LLHToXYZ
Purpose:
	 Converts geodetic latitude, longitude, and height to an ECI position vector XYZ.
Syntax: 
	void LLHToXYZ((in-Double) thetaG, (in-Double[3]) metricLLH, (out-Double[3]) metricXYZ)
Parameters: 
	thetaG: Theta - Greenwich mean sidereal time (rad).
	metricLLH: An array containing geodetic north latitude (degree), east longitude (degree), and height (km) to be converted.
	metricXYZ: The resulting ECI (TEME of Date) position vector (km).
=======================================================================================
 26. LLHToXYZTime
Purpose:
	 Converts geodetic latitude, longitude, and height to an ECI position vector XYZ at the specified time.
Syntax: 
	void LLHToXYZTime((in-Double) ds50UTC, (in-Double[3]) metricLLH, (out-Double[3]) metricXYZ)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	metricLLH: An array containing geodetic north latitude (degree), east longitude (degree), and height (km) to be converted.
	metricXYZ: The resulting ECI (TEME of Date) position vector (km).
=======================================================================================
 27. EFGToECI
Purpose:
	 Converts EFG position and velocity vectors to ECI position and velocity vectors.
Syntax: 
	void EFGToECI((in-Double) thetaG, (in-Double[3]) posEFG, (in-Double[3]) velEFG, (out-Double[3]) posECI, (out-Double[3]) velECI)
Parameters: 
	thetaG: Theta - Greenwich mean sidereal time (rad).
	posEFG: The EFG position vector (km) to be converted.
	velEFG: The EFG velocity vector (km/s) to be converted.
	posECI: The resulting ECI (TEME of Date) position vector (km).
	velECI: The resulting ECI (TEME of Date) velocity vector (km/s).
=======================================================================================
 28. EFGToECITime
Purpose:
	 Converts EFG position and velocity vectors to ECI position and velocity vectors at the specified time.
Syntax: 
	void EFGToECITime((in-Double) ds50UTC, (in-Double[3]) posEFG, (in-Double[3]) velEFG, (out-Double[3]) posECI, (out-Double[3]) velECI)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	posEFG: The EFG position vector (km) to be converted.
	velEFG: The EFG velocity vector (km/s) to be converted.
	posECI: The resulting ECI (TEME of Date) position vector (km).
	velECI: The resulting ECI (TEME of Date) velocity vector (km/s).
=======================================================================================
 29. ECIToEFG
Purpose:
	 Converts ECI position and velocity vectors to EFG position and velocity vectors.
Syntax: 
	void ECIToEFG((in-Double) thetaG, (in-Double[3]) posECI, (in-Double[3]) velECI, (out-Double[3]) posEFG, (out-Double[3]) velEFG)
Parameters: 
	thetaG: Theta - Greenwich mean sidereal time (rad).
	posECI: The ECI (TEME of Date) position vector (km) to be converted.
	velECI: The ECI (TEME of Date) velocity vector (km/s) to be converted.
	posEFG: The resulting EFG position vector (km).
	velEFG: The resulting EFG velocity vector (km/s).
=======================================================================================
 30. ECIToEFGTime
Purpose:
	 Converts ECI position and velocity vectors to EFG position and velocity vectors at the specified time.
Syntax: 
	void ECIToEFGTime((in-Double) ds50UTC, (in-Double[3]) posECI, (in-Double[3]) velECI, (out-Double[3]) posEFG, (out-Double[3]) velEFG)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	posECI: The ECI (TEME of Date) position vector (km) to be converted.
	velECI: The ECI (TEME of Date) velocity vector (km/s) to be converted.
	posEFG: The resulting EFG position vector (km).
	velEFG: The resulting EFG velocity vector (km/s).
=======================================================================================
 31. ECRToEFG
Purpose:
	 Converts ECR position and velocity vectors to EFG position and velocity vectors.
Syntax: 
	void ECRToEFG((in-Double) polarX, (in-Double) polarY, (in-Double[3]) posECR, (in-Double[3]) velECR, (out-Double[3]) posEFG, (out-Double[3]) velEFG)
Parameters: 
	polarX: Polar motion X (arc-sec).
	polarY: Polar motion Y (arc-sec).
	posECR: The ECR position vector (km) to be converted.
	velECR: The ECR velocity vector (km/s) to be converted.
	posEFG: The resulting EFG position vector (km).
	velEFG: The resulting EFG velocity vector (km/s).
=======================================================================================
 32. ECRToEFGTime
Purpose:
	 Converts ECR position and velocity vectors to EFG position and velocity vectors at the specified time.
Syntax: 
	void ECRToEFGTime((in-Double) ds50UTC, (in-Double[3]) posECR, (in-Double[3]) velECR, (out-Double[3]) posEFG, (out-Double[3]) velEFG)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC.
	posECR: The ECR position vector (km) to be converted.
	velECR: The ECR velocity vector (km/s) to be converted.
	posEFG: The resulting EFG position vector (km) (set to zeros if timing constants not loaded).
	velEFG: The resulting EFG velocity vector (km/s) (set to zeros if timing constants not loaded).
=======================================================================================
 33. EFGToECR
Purpose:
	 Converts EFG position and velocity vectors to ECR position and velocity vectors.
Syntax: 
	void EFGToECR((in-Double) polarX, (in-Double) polarY, (in-Double[3]) posEFG, (in-Double[3]) velEFG, (out-Double[3]) posECR, (out-Double[3]) velECR)
Parameters: 
	polarX: Polar motion X (arc-sec).
	polarY: Polar motion Y (arc-sec).
	posEFG: The EFG position vector (km) to be converted.
	velEFG: The EFG velocity vector (km/s) to be converted.
	posECR: The resulting ECR position vector (km).
	velECR: The resulting ECR velocity vector (km/s).
=======================================================================================
 34. EFGToECRTime
Purpose:
	 Converts EFG position and velocity vectors to ECR position and velocity vectors at the specified time.
Syntax: 
	void EFGToECRTime((in-Double) ds50UTC, (in-Double[3]) posEFG, (in-Double[3]) velEFG, (out-Double[3]) posECR, (out-Double[3]) velECR)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	posEFG: The EFG position vector (km) to be converted.
	velEFG: The EFG velocity vector (km/s) to be converted.
	posECR: The resulting ECR position vector (km) (set to zeros if timing constants not loaded).
	velECR: The resulting ECR velocity vector (km/s) (set to zeros if timing constants not loaded).
=======================================================================================
 35. EFGPosToLLH
Purpose:
	 Converts an EFG position vector to geodetic latitude, longitude, and height.
Syntax: 
	void EFGPosToLLH((in-Double[3]) posEFG, (out-Double[3]) metricLLH)
Parameters: 
	posEFG: The EFG position vector (km) to be converted.
	metricLLH: The resulting geodetic north latitude (degree), east longitude (degree), and height (km).
=======================================================================================
 36. LLHToEFGPos
Purpose:
	 Converts geodetic latitude, longitude, and height to an EFG position vector.
Syntax: 
	void LLHToEFGPos((in-Double[3]) metricLLH, (out-Double[3]) posEFG)
Parameters: 
	metricLLH: An Array containing the geodetic north latitude (degree), east longitude (degree), and height (km) to be converted.
	posEFG: The resulting EFG position vector (km).
=======================================================================================
 37. RotJ2KToDate
Purpose:
	 Rotates position and velocity vectors from J2000 to coordinates of the specified date, expressed in ds50TAI.
Syntax: 
	void RotJ2KToDate((in-Integer) spectr, (in-Integer) nutationTerms, (in-Double) ds50TAI, (in-Double[3]) posJ2K, (in-Double[3]) velJ2K, (out-Double[3]) posDate, (out-Double[3]) velDate)
Parameters: 
	spectr: Specifies whether to run in SPECTR compatibility mode. A value of 1 means Yes.
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate).
	ds50TAI: The date to rotate to coordinates of, expressed in days since 1950, TAI.
	posJ2K: The position vector from J2000.
	velJ2K: The velocity vector from J2000.
	posDate: The resulting position vector in coordinates of date, ds50TAI.
	velDate: The resulting velocity vector in coordinates of date, ds50TAI.
=======================================================================================
 38. RotDateToJ2K
Purpose:
	 Rotates position and velocity vectors from coordinates of date to J2000.
Syntax: 
	void RotDateToJ2K((in-Integer) spectr, (in-Integer) nutationTerms, (in-Double) ds50TAI, (in-Double[3]) posDate, (in-Double[3]) velDate, (out-Double[3]) posJ2K, (out-Double[3]) velJ2K)
Parameters: 
	spectr: Specifies whether to run in SPECTR compatibility mode. A value of 1 means Yes.
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate).
	ds50TAI: Time in days since 1950, TAI for which the coordinates of position and velocity vectors are currently expressed.
	posDate: The position vector from coordinates of Date.
	velDate: The velocity vector from coordinates of Date.
	posJ2K: The resulting position vector in coordinates of J2000.
	velJ2K: The resulting velocity vector in coordinates of J2000.
=======================================================================================
 39. CompSunMoonPos
Purpose:
	 Computes the Sun and Moon position at the specified time.
Syntax: 
	void CompSunMoonPos((in-Double) ds50ET, (out-Double[3]) uvecSun, (out-Double) sunVecMag, (out-Double[3]) uvecMoon, (out-Double) moonVecMag)
Parameters: 
	ds50ET: The number of days since 1950, ET (Ephemeris Time/Terrestrial Time) for which to compute the sun and moon position.
	uvecSun: The resulting sun position unit vector.
	sunVecMag: The resulting magnitude of the sun position vector (km).
	uvecMoon: The resulting moon position unit vector.
	moonVecMag: The resulting magnitude of the moon position vector (km).
=======================================================================================
 40. CompSunPos
Purpose:
	 Computes the Sun position at the specified time.
Syntax: 
	void CompSunPos((in-Double) ds50ET, (out-Double[3]) uvecSun, (out-Double) sunVecMag)
Parameters: 
	ds50ET: The number of days since 1950, ET (Ephemeris Time/Terrestrial Time) for which to compute the sun position.
	uvecSun: The resulting sun position unit vector.
	sunVecMag: The resulting magnitude of the sun position vector (km).
=======================================================================================
 41. CompMoonPos
Purpose:
	 Computes the Moon position at the specified time.
Syntax: 
	void CompMoonPos((in-Double) ds50ET, (out-Double[3]) uvecMoon, (out-Double) moonVecMag)
Parameters: 
	ds50ET: The number of days since 1950, ET (Ephemeris Time/Terrestrial Time) for which to compute the moon position.
	uvecMoon: The resulting moon position unit vector.
	moonVecMag: The resulting magnitude of the moon position vector (km).
=======================================================================================
 42. AstroConvFrTo
Purpose:
	 This function is intended for future use.  No information is currently available.
	 This function is intended for future use.  No information is currently available.
Syntax: 
	void AstroConvFrTo((in-Integer) xf_Conv, (in-Double[128]) frArr, (out-Double[128]) toArr)
Parameters: 
	xf_Conv: Index of the conversion function
	frArr: The input array
	toArr: The resulting array
=======================================================================================
 43. RADecToLAD
Purpose:
	 Converts right ascension and declination to vector triad LAD in topocentric equatorial coordinate system.
Syntax: 
	void RADecToLAD((in-Double) ra, (in-Double) dec, (out-Double[3]) l, (out-Double[3]) a_tilde, (out-Double[3]) d_tilde)
Parameters: 
	ra: Right ascension (deg).
	dec: Declination (deg).
	l: The resulting unit vector from the station to the satellite (referred to the equatorial coordinate system axis).
	a_tilde: The resulting unit vector perpendicular to the hour circle passing through the satellite, in the direction of increasing RA.
	d_tilde: The resulting unit vector perpendicular to L and is directed toward the north, in the plane of the hour circle.
=======================================================================================
 44. AzElToLAD
Purpose:
	 Converts azimuth and elevation to vector triad LAD in topocentric horizontal coordinate system.
Syntax: 
	void AzElToLAD((in-Double) az, (in-Double) el, (out-Double[3]) lh, (out-Double[3]) ah, (out-Double[3]) dh)
Parameters: 
	az: Input azimuth (deg).
	el: Input elevation angle (deg).
	lh: The resulting unit vector from the station to the satellite (referred to the horizon coordinate system axis).
	ah: The resulting unit vector perpendicular to the hour circle passing through the satellite, in the direction of increasing Az.
	dh: The resulting unit vector perpendicular to L and is directed toward the zenith, in the plane of the hour circle.
=======================================================================================
 45. ECIToTopoComps
Purpose:
	 Converts satellite ECI position/velocity vectors and sensor location to topocentric components.
	 The xa_topo array has the following structure:
	 [0]: Resulting right ascension (RA) (deg)
	 [1]: Declination (deg)
	 [2]: Azimuth (deg)
	 [3]: Elevation (deg)
	 [4]: Range (km)
	 [5]: RAdot (first derivative of right ascension) (deg/s)
	 [6]: DecDot (first derivative of declination) (deg/s)
	 [7]: AzDot (first derivative of azimuth) (deg/s)
	 [8]: ElDot (first derivative of elevation) (deg/s)
	 [9]: RangeDot (first derivative of range) (km/s)   
Syntax: 
	void ECIToTopoComps((in-Double) theta, (in-Double) lat, (in-Double[3]) senPos, (in-Double[3]) satPos, (in-Double[3]) satVel, (out-Double[10]) xa_topo)
Parameters: 
	theta: Theta - local sidereal time(rad).
	lat: Station's astronomical latitude (deg). (+N) (-S)
	senPos: Sensor position in ECI (km).
	satPos: Satellite position in ECI (km).
	satVel: Satellite velocity in ECI (km/s).
	xa_topo: An array that stores the resulting topocentric components.  see XA_TOPO_?
=======================================================================================
 46. RaDecToAzEl
Purpose:
	 Converts right ascension and declination in the topocentric reference frame to Azimuth/Elevation in the local horizon reference frame.
Syntax: 
	void RaDecToAzEl((in-Double) thetaG, (in-Double) lat, (in-Double) lon, (in-Double) ra, (in-Double) dec, (out-Double) az, (out-Double) el)
Parameters: 
	thetaG: Theta - Greenwich mean sidereal time (rad).
	lat: Station's astronomical latitude (deg). (+N) (-S)
	lon: Station's astronomical longitude (deg). (+E) (-W)
	ra: Right ascension (deg)
	dec: Declination (deg)
	az: Azimuth (deg)
	el: Elevation (deg)
=======================================================================================
 47. RaDecToAzElTime
Purpose:
	 Converts right ascension and declination in the topocentric reference frame to Azimuth/Elevation in the local horizon reference frame.
Syntax: 
	void RaDecToAzElTime((in-Double) ds50UTC, (in-Double) lat, (in-Double) lon, (in-Double) ra, (in-Double) dec, (out-Double) az, (out-Double) el)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	lat: Station's astronomical latitude (deg). (+N) (-S)
	lon: Station's astronomical longitude (deg). (+E) (-W)
	ra: Right ascension (deg)
	dec: Declination (deg)
	az: Azimuth (deg)
	el: Elevation (deg)
=======================================================================================
 48. AzElToRaDec
Purpose:
	 Converts Azimuth/Elevation in the local horizon reference frame to Right ascension/Declination in the topocentric reference frame
Syntax: 
	void AzElToRaDec((in-Double) thetaG, (in-Double) lat, (in-Double) lon, (in-Double) az, (in-Double) el, (out-Double) ra, (out-Double) dec)
Parameters: 
	thetaG: Theta - Greenwich mean sidereal time (rad).
	lat: Station's astronomical latitude (deg). (+N) (-S)
	lon: Station's astronomical longitude (deg). (+E) (-W)
	az: Azimuth (deg)
	el: Elevation (deg)
	ra: Right ascension (deg)
	dec: Declination (deg)
=======================================================================================
 49. AzElToRaDecTime
Purpose:
	 Converts Azimuth/Elevation in the local horizon reference frame to Right ascension/Declination in the topocentric reference frame
Syntax: 
	void AzElToRaDecTime((in-Double) ds50UTC, (in-Double) lat, (in-Double) lon, (in-Double) az, (in-Double) el, (out-Double) ra, (out-Double) dec)
Parameters: 
	ds50UTC: Input time in days since 1950 UTC
	lat: Station's astronomical latitude (deg). (+N) (-S)
	lon: Station's astronomical longitude (deg). (+E) (-W)
	az: Azimuth (deg)
	el: Elevation (deg)
	ra: Right ascension (deg)
	dec: Declination (deg)
=======================================================================================
 50. RAEToECI
Purpose:
	 Converts full state RAE (range, az, el, and their rates) to full state ECI (position and velocity)
	 The xa_rae array has the following structure:
	 [0]: Range (km)
	 [1]: Azimuth (deg)
	 [2]: Elevation (deg)
	 [3]: Range Dot (km/s)
	 [4]: Azimuth Dot (deg/s)
	 [5]: Elevation Dot (deg/s)
Syntax: 
	void RAEToECI((in-Double) theta, (in-Double) astroLat, (in-Double[6]) xa_rae, (in-Double[3]) senPos, (out-Double[3]) satPos, (out-Double[3]) satVel)
Parameters: 
	theta: Theta - local sidereal time(rad).
	astroLat: Astronomical latitude (ded).
	xa_rae: An array contains input data.  see XA_RAE_?
	senPos: Sensor position in ECI (km).
	satPos: Satellite position in ECI (km).
	satVel: Satellite velocity in ECI (km/s).
=======================================================================================
 51. GetInitialDrag
Purpose:
	 Computes initial values for the SGP drag term nDot and the SGP4 drag term BSTAR based upon eccentricity and semi-major axis.
Syntax: 
	void GetInitialDrag((in-Double) semiMajorAxis, (in-Double) eccen, (out-Double) nDot, (out-Double) bstar)
Parameters: 
	semiMajorAxis: Semi-major axis (km).
	eccen: Eccentricity (unitless).
	nDot: NDot (revs/day^2).
	bstar: Bstar (1/earth radii).
=======================================================================================
 52. CovMtxPTWToUVW
Purpose:
	 Converts covariance matrix PTW to UVW.
	 PTW = P: TxW, T: along velocity direction, W: pos x vel.
	 UVW = U: radial direction, V: in plane, perpendicular to U, W: pos x vel.
Syntax: 
	void CovMtxPTWToUVW((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) ptwCovMtx, (out-Double[6, 6]) uvwCovMtx)
Parameters: 
	pos: The input position vector (km).
	vel: The input velocity vector (km/s).
	ptwCovMtx: The PTW covariance matrix to be converted.
	uvwCovMtx: The resulting UVW covariance matrix.
=======================================================================================
 53. CovMtxUVWToPTW
Purpose:
	 Converts covariance matrix UVW to PTW.
	 PTW = P: TxW, T: along velocity direction, W: pos x vel.
	 UVW = U: radial direction, V: in plane, perpendicular to U, W: pos x vel.
Syntax: 
	void CovMtxUVWToPTW((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) uvwCovMtx, (out-Double[6, 6]) ptwCovMtx)
Parameters: 
	pos: The input position vector (km).
	vel: The input velocity vector (km/s).
	uvwCovMtx: The UVW covariance matrix to be converted.
	ptwCovMtx: The resulting PTW covariance matrix.
=======================================================================================
 54. EarthObstructionAngles
Purpose:
	 Computes Earth/Sensor/Earth Limb and Earth/Sensor/Satellite angles.
Syntax: 
	void EarthObstructionAngles((in-Double) earthLimb, (in-Double[3]) satECI, (in-Double[3]) senECI, (out-Double) earthSenLimb, (out-Double) earthSenSat, (out-Double) satEarthSen)
Parameters: 
	earthLimb: Earth limb distance (km).
	satECI: Satellite position in ECI (km).
	senECI: Sensor position in ECI (km).
	earthSenLimb: The resulting earth/sensor/limb angle (deg).
	earthSenSat: The resulting earth/sensor/sat angle (deg).
	satEarthSen: The resulting sat/earth/sensor angle (deg).
=======================================================================================
 55. IsPointSunlit
Purpose:
	 Determines if a point in space is sunlit at the input time ds50ET
Syntax: 
	int IsPointSunlit((in-Double) ds50ET, (in-Double[3]) ptEci)
Parameters: 
	ds50ET: The number of days since 1950, ET (Ephemeris Time/Terrestrial Time) for which to determine if the point is sunlit.
	ptEci: A position in ECI (km).
Return Value:
	0=no, the specified point isn't sunlit, 1=yes, the specified point is sunlit
=======================================================================================
 56. RotRADecl
Purpose:
	 Rotates Right Ascension and Declination to specified epoch
Syntax: 
	void RotRADecl((in-Integer) nutationTerms, (in-Integer) dir, (in-Double) ds50UTCIn, (in-Double) raIn, (in-Double) declIn, (in-Double) ds50UTCOut, (out-Double) raOut, (out-Double) declOut)
Parameters: 
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate).
	dir: 1: TEME of Date To MEME year of equinox, 2: MEME year of equinox to TEME of Date
	ds50UTCIn: Origin time in days since 1950 UTC
	raIn: Input right ascension (deg)
	declIn: Input declination (deg)
	ds50UTCOut: Destination time in days since 1950 UTC
	raOut: Output right ascension (deg)
	declOut: Output declination (deg)
=======================================================================================
 57. RotRADec_DateToEqnx
Purpose:
	 Rotates Right Ascension and Declination from TEME of Date to MEME of the specified year of equinox
Syntax: 
	int RotRADec_DateToEqnx((in-Integer) nutationTerms, (in-Integer) yrOfEqnx, (in-Double) ds50UTCIn, (in-Double) raIn, (in-Double) declIn, (out-Double) raOut, (out-Double) declOut)
Parameters: 
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate).
	yrOfEqnx: Year of equinox (=1: 0 Jan of input year, =2: J2000, =3: B1950)
	ds50UTCIn: Input time in days since 1950 UTC
	raIn: Input right ascension (deg)
	declIn: Input declination (deg)
	raOut: Output right ascension (deg)
	declOut: Output declination (deg)
Return Value:
	0 if the rotation was successful, non-0 if there is an error
=======================================================================================
 58. RotRADec_EqnxToDate
Purpose:
	 Rotates Right Ascension and Declination from MEME of the specified year of equinox to TEME of Date
Syntax: 
	int RotRADec_EqnxToDate((in-Integer) nutationTerms, (in-Integer) yrOfEqnx, (in-Double) ds50UTCIn, (in-Double) raIn, (in-Double) declIn, (out-Double) raOut, (out-Double) declOut)
Parameters: 
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate)
	yrOfEqnx: Year of equinox (=1: 0 Jan of input year, =2: J2000, =3: B1950)
	ds50UTCIn: Input time in days since 1950 UTC
	raIn: Input right ascension (deg)
	declIn: Input declination (deg)
	raOut: Output right ascension (deg)
	declOut: Output declination (deg)
Return Value:
	0 if the rotation was successful, non-0 if there is an error
=======================================================================================
 59. CovMtxEqnxToUVW
Purpose:
	 Rotates the Equinoctial covariance to UVW
	 Note: This method uses the global Earth constants so make sure that you select the right Earth model by calling the EnvConst/EnvSetGeoIdx method
	 The n terms must be normalized by n
	 The input position, velocity and covariance must all have the same reference equator and equinox.
Syntax: 
	void CovMtxEqnxToUVW((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) covMtxEqnx, (out-Double[6, 6]) covMtxUVW)
Parameters: 
	pos: The input position vector in ECI
	vel: The input velocity vector in ECI
	covMtxEqnx: The input covariance matrix in equinoctial elements (af, ag, Lbar, n/n, chi, psi)
	covMtxUVW: The output covariance in UVW
=======================================================================================
 60. CovMtxUVWToEqnx
Purpose:
	 Rotates the UVW covariance to Equinoctial
	 Note: This method uses the global Earth constants so make sure that you select the right Earth model by calling the EnvConst/EnvSetGeoIdx method
	 The n terms are normalized by n
	 The input position, velocity reference equator and equinox determine the output covariance reference frame.
Syntax: 
	void CovMtxUVWToEqnx((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) covMtxUVW, (out-Double[6, 6]) covMtxEqnx)
Parameters: 
	pos: The input position vector in ECI TEME Of Date
	vel: The input velocity vector in ECI TEME Of Date
	covMtxUVW: The input covariance matrix UVW
	covMtxEqnx: The output covariance in in equinoctial elements (af, ag, Lbar, n/n, chi, psi)
=======================================================================================
 61. CovMtxECIToUVW
Purpose:
	 Rotates the ECI covariance to UVW
	 Note: This method uses the global Earth constants so make sure that you select the proper Earth model by calling the EnvConst/EnvSetGeoIdx method
Syntax: 
	void CovMtxECIToUVW((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) covMtxECI, (out-Double[6, 6]) covMtxUVW)
Parameters: 
	pos: The input position vector in either TEME or J2K ECI
	vel: The input velocity vector in either TEME or J2K ECI
	covMtxECI: The input covariance matrix in ECI
	covMtxUVW: The output covariance in UVW
=======================================================================================
 62. CovMtxUVWToECI
Purpose:
	 Rotates the UVW covariance to ECI
	 Note: This method uses the global Earth constants so make sure that you select the proper Earth model by calling the EnvConst/EnvSetGeoIdx method
Syntax: 
	void CovMtxUVWToECI((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[6, 6]) covMtxUVW, (out-Double[6, 6]) covMtxECI)
Parameters: 
	pos: The input position vector in either TEME or J2K ECI
	vel: The input velocity vector in either TEME or J2K ECI
	covMtxUVW: The input covariance matrix in UVW
	covMtxECI: The output covariance in ECI
=======================================================================================
 63. CovMtxECIToEFG
Purpose:
	 Converts covariance matrix ECI to EFG.
	 EFG = Earth Fixed Greenwich
	 ECI = Earth Centered Inertial - need to determine TEME or J2K
Syntax: 
	void CovMtxECIToEFG((in-Double) thetaG, (in-Double[6, 6]) covECI, (out-Double[6, 6]) covEFG)
Parameters: 
	thetaG: Theta - local sidereal time (rad)
	covECI: 6x6 ECI Covariance
	covEFG: 6x6 EFG Covariance
=======================================================================================
 64. CovMtxEFGToECI
Purpose:
	 Converts covariance matrix EFG to ECI.
	 EFG = Earth Fixed Greenwich
	 ECI = Earth Centered Inertial - need to determine TEME or J2K
Syntax: 
	void CovMtxEFGToECI((in-Double) thetaG, (in-Double[6, 6]) covEFG, (out-Double[6, 6]) covECI)
Parameters: 
	thetaG: Theta - local sidereal time (rad)
	covEFG: 6x6 EFG Covariance
	covECI: 6x6 ECI Covariance
=======================================================================================
 65. Mtx6x6ToLTA21
Purpose:
	 Converts 6x6 symmetric Matrix/2D array to 1D array of 21 elements (lower triangular of a 6x6 symmetric matrix)
Syntax: 
	void Mtx6x6ToLTA21((in-Double[6, 6]) symMtx6x6, (out-Double[21]) lta21)
Parameters: 
	symMtx6x6: Input 6x6 symmetric matrix
	lta21: Output 1D array of 21 elements (lower triangular of a 6x6 matrix)
=======================================================================================
 66. LTA21ToMtx6x6
Purpose:
	 Converts 1D array of 21 elements (lower triangular of a 6x6 symmetric matrix) to a 6x6 symmetric matrix
Syntax: 
	void LTA21ToMtx6x6((in-Double[21]) lta21, (out-Double[6, 6]) symMtx6x6)
Parameters: 
	lta21: Input 1D array of 21 elements (lower triangular of a 6x6 matrix)
	symMtx6x6: Output 6x6 symmetric matrix
=======================================================================================
 67. Mtx9x9ToLTA45
Purpose:
	 Converts 9x9 symmetric Matrix/2D array to 1D array of 45 elements (lower triangular of a 9x9 symmetric matrix)
Syntax: 
	void Mtx9x9ToLTA45((in-Double[9, 9]) symMtx9x9, (out-Double[45]) lta45)
Parameters: 
	symMtx9x9: Input 9x9 symmetric matrix
	lta45: Output 1D array of 45 elements (lower triangular of a 9x9 matrix)
=======================================================================================
 68. LTA45ToMtx9x9
Purpose:
	 Converts 1D array of 45 elements (lower triangular of a 9x9 symmetric matrix) to a 9x9 symmetric matrix
Syntax: 
	void LTA45ToMtx9x9((in-Double[45]) lta45, (out-Double[9, 9]) symMtx9x9)
Parameters: 
	lta45: Input 1D array of 45 elements (lower triangular of a 9x9 matrix)
	symMtx9x9: Output 9x9 symmetric matrix
=======================================================================================
 69. PropCovFrState
Purpose:
	 Propagate xyzDate covariance forward to the propagation time
Syntax: 
	void PropCovFrState((in-Double) rms, (in-Double) consider, (in-Double[54]) stateArray, (in-Double[9, 9]) cov, (out-Double[6, 6]) propCov)
Parameters: 
	rms: Root mean square of observation residulas
	consider: Density consider parameter, 12 is recommended (this is a percentile)
	stateArray: State transition matrix
	cov: Covariance matrix at start time
	propCov: Covariance at end time for state matrix
=======================================================================================
 70. CovMtxECIToEqnx
Purpose:
	 Rotates the ECI covariance to UVW
	 Note: This method uses the global Earth constants so make sure that you select the proper Earth model by calling the EnvConst/EnvSetGeoIdx method
Syntax: 
	void CovMtxECIToEqnx((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[9, 9]) covMtxECI, (out-Double[9, 9]) covMtxEqnx)
Parameters: 
	pos: The input position vector in either TEME or J2K ECI
	vel: The input velocity vector in either TEME or J2K ECI
	covMtxECI: The input covariance matrix in ECI
	covMtxEqnx: The output covariance in UVW
=======================================================================================
 71. CovMtxEqnxToECI9x9
Purpose:
	 Rotates the UVW covariance to ECI
	 Note: This method uses the global Earth constants so make sure that you select the proper Earth model by calling the EnvConst/EnvSetGeoIdx method
Syntax: 
	void CovMtxEqnxToECI9x9((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[9, 9]) covEqnx, (out-Double[9, 9]) covMtxECI)
Parameters: 
	pos: The input position vector in either TEME or J2K ECI
	vel: The input velocity vector in either TEME or J2K ECI
	covEqnx: 45 or 55
	covMtxECI: The output covariance in ECI
=======================================================================================
 72. CovMtxEqnxToUVW9x9
Purpose:
	 Rotates the UVW covariance to ECI
	 Note: This method uses the global Earth constants so make sure that you select the proper Earth model by calling the EnvConst/EnvSetGeoIdx method
Syntax: 
	void CovMtxEqnxToUVW9x9((in-Double[3]) pos, (in-Double[3]) vel, (in-Double[9, 9]) covEqnx, (out-Double[9, 9]) covMtxUVW)
Parameters: 
	pos: The input position vector in either TEME or J2K ECI
	vel: The input velocity vector in either TEME or J2K ECI
	covEqnx: 45 or 55
	covMtxUVW: The output covariance in ECI
=======================================================================================
 73. CovMtxUpdate
Purpose:
	 Update (propagate) covariance to a future time with a supplied covariance, state transition matrix
	 consider parameter and RMS. Consider parameter is applied to the drag term only.
	 Full covariance matrix is multiplied by RMS squared.  State transition matrix can be obtained from 
	 SpProp.SpGetStateMtx or supplying your own. State matrix, input and output covariance must be in 
	 matching coordinate systems.
Syntax: 
	void CovMtxUpdate((in-Double) rmsIn, (in-Double) consider, (in-Double[9, 9]) cov, (in-Double[54]) stateArray, (out-Double[6, 6]) propCov)
Parameters: 
	rmsIn: Root mean square of sensor errors
	consider: Consider parameter (percentage)
	cov: Covariance at epoch
	stateArray: Consider parameter and root mean square
	propCov: Updated covariance
=======================================================================================
 74. AberrationAnnual
Purpose:
	 Annual Aberration calculated using equations from Astronomical Algorithms, Jean Meeus, 2nd Edition with Corrections as of June 15, 2005
Syntax: 
	void AberrationAnnual((in-Double) ra, (in-Double) decl, (in-Double) dS50UTC, (out-Double) raDelta, (out-Double) decDelta)
Parameters: 
	ra: Input right ascension (deg)
	decl: Input declination (deg)
	dS50UTC: Time in days since 1950 UTC
	raDelta: Right Ascension delta due to Annual Aberration (deg)
	decDelta: Declination delta due to Annual Aberration (deg)
=======================================================================================
 75. AberrationDiurnal
Purpose:
	 Diurnal Aberration is due to the rotation of the Earth about it's axis. This is only valid for ground based sensors.
	 Diurnal Aberration calculated using equations from Explanatory Supplement to the Astronomical Almanac 3rd Edition, 2013
Syntax: 
	void AberrationDiurnal((in-Double) ra, (in-Double) decl, (in-Double) dS50UTC, (in-Double[3]) senPos, (out-Double) raDelta, (out-Double) decDelta)
Parameters: 
	ra: Input right ascension (deg)
	decl: Input declination (deg)
	dS50UTC: Time in days since 1950 UTC
	senPos: Sensor EFG geocentric position (meters)
	raDelta: Right Ascension delta due to Diurnal Aberration (deg)
	decDelta: Declination delta due to Diurnal Aberration (deg)
=======================================================================================
 76. JplSetParameters
Purpose:
	 Sets JPL parameters
	 Notes: Set JPL parameters will be used by SP, SPG4-XP, and anything that requires access to JPL data
Syntax: 
	void JplSetParameters((in-Character[512]) jplFile, (in-Double) ds50Start, (in-Double) ds50Stop)
Parameters: 
	jplFile: The name of the JPL file.
	ds50Start: Start Time of JPL ephmeris to load
	ds50Stop: End Time of JPL ephemeris to load
=======================================================================================
 77. JplGetParameters
Purpose:
	 Gets JPL parameters
Syntax: 
	void JplGetParameters((out-Character[512]) jplFile, (out-Double) ds50Start, (out-Double) ds50Stop)
Parameters: 
	jplFile: The name of the JPL file.
	ds50Start: Start Time of Ephmeris to load
	ds50Stop: End Time of Ephemeris to load
=======================================================================================
 78. JplReset
Purpose:
	 Resets JPL parameters & removes JPL ephemeris data
Syntax: 
	void JplReset()
Parameters: 
	None
=======================================================================================
 79. JplCompSunMoonVec
Purpose:
	 Computes various Sun and Moon vectors base on loaded JPL data at the specified time.
	 Note: if JPL data isn't loaded or available, all output parameters are set to zero
Syntax: 
	void JplCompSunMoonVec((in-Double) ds50UTC, (out-Double[3]) uvecSun, (out-Double) sunVecMag, (out-Double[3]) uvecMoon, (out-Double) moonVecMag)
Parameters: 
	ds50UTC: Input time in day since 1950 UTC
	uvecSun: The resulting sun position unit vector.
	sunVecMag: The resulting magnitude of the sun position vector (km).
	uvecMoon: The resulting moon position unit vector.
	moonVecMag: The resulting magnitude of the moon position vector (km).
=======================================================================================
 80. JplCompSunMoonPos
Purpose:
	 Computes Sun and Moon position vectors base on loaded JPL data at the specified time.
	 Note: if JPL data isn't loaded or available, all output parameters are set to zero
Syntax: 
	void JplCompSunMoonPos((in-Double) ds50UTC, (out-Double[3]) sunVec, (out-Double[3]) moonVec)
Parameters: 
	ds50UTC: Input time in day since 1950 UTC
	sunVec: The resulting sun position vector (km).
	moonVec: The resulting sun position vector (km).
=======================================================================================
 81. RemoveJpl
Purpose:
	 Removes the JPL ephemeris from memory
Syntax: 
	void RemoveJpl()
Parameters: 
	None
=======================================================================================
 82. TemeEpochToDate
Purpose:
	 Rotates position and velocity vectors from TEME of Epoch to TEME of Date
Syntax: 
	void TemeEpochToDate((in-Integer) nutationTerms, (in-Double) epochDs50TAI, (in-Double) dateDs50TAI, (in-Double[3]) posEpoch, (in-Double[3]) velEpoch, (out-Double[3]) posDate, (out-Double[3]) velDate)
Parameters: 
	nutationTerms: Nutation terms (4-106, 4:least accurate, 106:most acurate).
	epochDs50TAI: The date of which posEpoch/velEpoch are based on, expressed in days since 1950, TAI.
	dateDs50TAI: The date of which posEpoch/velEpoch will rotate to, expressed in days since 1950, TAI.
	posEpoch: The position vector in TEME of Epoch.
	velEpoch: The velocity vector in TEME of Epoch.
	posDate: The resulting position vector in TEME of Date.
	velDate: The resulting velocity vector in TEME of Date.
=======================================================================================



