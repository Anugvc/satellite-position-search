  1. DllMainInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes DllMain program (host of Astro Standards libraries) for use in any Astro Standards applications
Syntax: 
	__int64 DllMainInit()
Parameters: 
	None
Return Value:
	A handle to the global data set. You will pass this handle to other initialization functions within other DLLs in the API.
=======================================================================================
  2. DllMainGetInfo
Purpose:
	 Returns information about the DllMain DLL. 
	 The returned string provides information about the version number, build date, and the platform. 
Syntax: 
	void DllMainGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about DllMain.dll.
=======================================================================================
  3. DllMainLoadFile
Purpose:
	 Loads DllMain-related parameters (AS_MOIC) from a text file
Syntax: 
	int DllMainLoadFile((in-Character[512]) dllMainFile)
Parameters: 
	dllMainFile: The name of the input file.
Return Value:
	Returns zero indicating the input file has been loaded successfully. Other values indicate an error.
=======================================================================================
  4. OpenLogFile
Purpose:
	 Opens a log file and enables the writing of diagnostic information into it. 
	 All of the DLLs in the library will write diagnostic information into the log file once this function has been called.
	 If the file specified by logFileName already exists, its contents are erased.
	 
	 Enabling logging can potentially result in large amounts of diagnostic information being generated, which can lead to large amounts of storage being consumed as well as performance decreases. For this reason, it is recommended that this function only be used for debugging purposes.
Syntax: 
	int OpenLogFile((in-Character[512]) fileName)
Parameters: 
	fileName: The name of the log file to use.
Return Value:
	0 if the file was opened successfully. Other values indicate an error.
=======================================================================================
  5. CloseLogFile
Purpose:
	 Closes the currently open log file and reset the last logged error message to null. 
	 Remember to close the log file before exiting the program.
Syntax: 
	void CloseLogFile()
Parameters: 
	None
=======================================================================================
  6. LogMessage
Purpose:
	 Writes a message into the log file.
	 Make sure the log file is open by calling OpenLogFile before using this function.
	 
	 The message is limited to 128 characters. If the message is longer than this, it will be truncated.
Syntax: 
	void LogMessage((in-Character[128]) msgStr)
Parameters: 
	msgStr: A message to be written into the log file.
=======================================================================================
  7. GetLastErrMsg
Purpose:
	 Returns a character string describing the last error that occurred. 
	 As a common practice, this function is called to retrieve the error message when an error occurs.
	 
	 This function works with or without an opened log file.
	 
	 If you call this function before you have called DllMainInit(), the function will return an invalid string. This could result in undefined behavior.
Syntax: 
	void GetLastErrMsg((out-Character[128]) lastErrMsg)
Parameters: 
	lastErrMsg: A string that stores the last logged error message. The message will be placed in the string you pass to this function.
=======================================================================================
  8. GetLastInfoMsg
Purpose:
	 Returns a character string describing the last informational message that was recorded. 
	 This function is usually called right after space objects (TLEs, VCMs, sensors, observations, etc.) in an input text file were loaded. It gives information about how many records were successfully loaded, how many were bad, and how many were duplicated.
	 
	 This function works with or without an opened log file.
	 
	 If you call this function before you have called DllMainInit(), the function will return an invalid string. This could result in undefined behavior.
	 This function provides a quick way to check whether all of the prerequisite DLLs have been loaded and initialized correctly. Improper initialization of the Standardized Astrodynamic Algorithms DLLs is one of the most common causes of program crashes.
Syntax: 
	void GetLastInfoMsg((out-Character[128]) lastInfoMsg)
Parameters: 
	lastInfoMsg: A string that stores the last logged informational message. The message will be placed in the string you pass to this function.
=======================================================================================
  9. GetInitDllNames
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Returns a list of names of the Standardized Astrodynamic Algorithms DLLs that were initialized successfully.
Syntax: 
	void GetInitDllNames((out-Character[512]) initDllNames)
Parameters: 
	initDllNames: A string that stores names of the DLLs that were initialized successfully.
=======================================================================================
 10. TestInterface
Purpose:
	 Tests different input/output data types that are supported by the Astrodynamic Standards library.
Syntax: 
	void TestInterface((in-Character) cIn, (out-Character) cOut, (in-Integer) intIn, (out-Integer) intOut, (in-Long) longIn, (out-Long) longOut, (in-Double) realIn, (out-Double) realOut, (in-Character[512]) strIn, (out-Character[512]) strOut, (in-Integer[3]) int1DIn, (out-Integer[3]) int1DOut, (in-Long[3]) long1DIn, (out-Long[3]) long1DOut, (in-Double[3]) real1DIn, (out-Double[3]) real1DOut, (in-Integer[2, 3]) int2DIn, (out-Integer[2, 3]) int2DOut, (in-Long[2, 3]) long2DIn, (out-Long[2, 3]) long2DOut, (in-Double[2, 3]) real2DIn, (out-Double[2, 3]) real2DOut)
Parameters: 
	cIn: An input character
	cOut: An output character - should return the same value as the input cIn
	intIn: An input 32-bit integer
	intOut: An output 32-bit integer - should return the same value as the input intIn
	longIn: An input 64-bit integer
	longOut: An output 64-bit integer - should return the same value as the input longIn
	realIn: An input 64-bit real
	realOut: An output 64-bit real - should return the same value as the input realIn
	strIn: Input string
	strOut: Output string - should return the same value as the input strIn
	int1DIn: An input array of 32-bit integers
	int1DOut: An output array of 32-bit integers - should return the same values as the input int1DIn
	long1DIn: An input array of 64-bit integers
	long1DOut: An output array of 64-bit integers - should return the same values as the input long1DIn
	real1DIn: An input array of 64-bit reals
	real1DOut: An output array of 64-bit reals - should return the same values as the input real1DIn
	int2DIn: An input 2D-array of 32-bit integers (2 rows, 3 columns) - for column-major order language, reverse the order
	int2DOut: An output 2D-array of 32-bit integers - should return the same values as the input int2DIn
	long2DIn: An input 2D-array of 64-bit integers (2 rows, 3 columns) - for column-major order language, reverse the order
	long2DOut: An output 2D-array of 64-bit integers - should return the same values as the input long2DIn
	real2DIn: An input 2D-array of 64-bit reals (2 rows, 3 columns) - for column-major order language, reverse the order
	real2DOut: An output 2D-array of 64-bit reals - should return the same values as the input real2DIn
=======================================================================================
 11. TestInterface2
Purpose:
	 Tests different input/output data types that are supported by the Astrodynamic Standards library.
Syntax: 
	void TestInterface2((inout-Character) cInOut, (inout-Integer) intInOut, (inout-Long) longInOut, (inout-Double) realInOut, (inout-Character[512]) strInOut, (inout-Integer[3]) int1DInOut, (inout-Long[3]) long1DInOut, (inout-Double[3]) real1DInOut, (inout-Integer[2, 3]) int2DInOut, (inout-Long[2, 3]) long2DInOut, (inout-Double[2, 3]) real2DInOut)
Parameters: 
	cInOut: Output should return 'Z'
	intInOut: Output should return Input + 1
	longInOut: Output should return Input + 2
	realInOut: Output should return Input + 42.123456
	strInOut: Output should return "It doesn't matter what your string was."
	int1DInOut: Output should return Input + 1
	long1DInOut: Output should return Input + 1234567890123456789
	real1DInOut: Output should return Input + 42.0
	int2DInOut: Output should return Input + 1
	long2DInOut: Output should return Input + 6
	real2DInOut: Output should return Input + 7.6
=======================================================================================
 12. TestInterface3
Purpose:
	 Tests input and output arrays with unknown length that are supported by the Astrodynamic Standards library.
Syntax: 
	void TestInterface3((in-Integer[*]) unk1DIn, (out-Integer[*]) unk1DOut, (in-Integer[*, 3]) unk2DIn, (out-Integer[*, 3]) unk2DOut)
Parameters: 
	unk1DIn: Unknown dimension should be length (3)
	unk1DOut: Unknown dimension should be length (3), unk1DOut should return same as unk1DIn * 4
	unk2DIn: Unknown dimension should be length (2)
	unk2DOut: Unknown dimension should be length (2), unk2DOut should return same as unk2DIn * 5
=======================================================================================
 13. GetMOICData
Purpose:
	 Returns data parsed from user's AS_MOIC-typed input card - up to 128 fields are allowed.
Syntax: 
	void GetMOICData((in-Integer) arrSize, (out-Double[*]) xa_moic)
Parameters: 
	arrSize: Size of the xa_moc array - actual number of fields the user enters in an "AS_MOIC" input card
	xa_moic: The returning xa_moc array
=======================================================================================
 14. SetElsetKeyMode
Purpose:
	 Sets ELSET key mode
	 This mode can also be turned on if the user loads an input text file that includes this line - "AS_DMA_ON" -
	 and is currently calling any of these methods: DllMainLoadFile(), TleLoadFile(), SpVecLoadFile(), or VcmLoadFile()
Syntax: 
	int SetElsetKeyMode((in-Integer) elset_keyMode)
Parameters: 
	elset_keyMode: Desired elset key mode (see ELSET_KEYMODE_? for available modes)
Return Value:
	0 if the set is successful, non-0 if there is an error.
=======================================================================================
 15. GetElsetKeyMode
Purpose:
	 Gets current ELSET key mode
Syntax: 
	int GetElsetKeyMode()
Parameters: 
	None
Return Value:
	Current elset key mode (see ELSET_KEYMODE_? for available modes)
=======================================================================================
 16. SetAllKeyMode
Purpose:
	 Sets key mode for ALL (elsets/obs/sensors). This takes precedence over individual elset/obs/sensor key mode
	 This mode can also be turned on if the user loads an input text file that includes this line - "AS_DMA_ALL_ON"
Syntax: 
	int SetAllKeyMode((in-Integer) all_keyMode)
Parameters: 
	all_keyMode: Desired elset key mode (see ALL_KEYMODE_? for available modes)
Return Value:
	0 if the set is successful, non-0 if there is an error.
=======================================================================================
 17. GetAllKeyMode
Purpose:
	 Gets current ALL (elsets/obs/sensors) key mode
Syntax: 
	int GetAllKeyMode()
Parameters: 
	None
Return Value:
	Current elset key mode (see ALL_KEYMODE_? for available modes)
=======================================================================================
 18. ResetAllKeyMode
Purpose:
	 Resets ALL (elsets/obs/sensors) key mode to its default value which then allows individual elsets/obs/sensors to use their own key mode settings.
	 Also reset DUPLICATION key mode to its default value.
Syntax: 
	void ResetAllKeyMode()
Parameters: 
	None
=======================================================================================
 19. SetDupKeyMode
Purpose:
	 Sets DUPLICATION key mode - change the default behavior of returning a key which already exists in memory: zero versus actual value
Syntax: 
	int SetDupKeyMode((in-Integer) dupKeyMode)
Parameters: 
	dupKeyMode: Desired duplication key mode (see DUPKEY_? for available modes)
Return Value:
	0 if the set is successful, non-0 if there is an error.
=======================================================================================
 20. GetDupKeyMode
Purpose:
	 Gets current DUPLICATION key mode
Syntax: 
	int GetDupKeyMode()
Parameters: 
	None
Return Value:
	Current duplication key mode (see DUPKEY_? for available modes)
=======================================================================================



