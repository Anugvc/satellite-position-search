  1. Sgp4Init
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes the Sgp4 DLL for use in the program.
	 
	 If this function returns an error, it is recommended that you stop the program immediately.
	 
	 An error will occur if you forget to load and initialize all the prerequisite DLLs, as listed in the DLL Prerequisites section of the accompanying documentation, before using this DLL.
Syntax: 
	int Sgp4Init((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit(). See the documentation for DllMain.dll for details.
Return Value:
	0 if Sgp4Prop.dll is initialized successfully, non-0 if there is an error.
=======================================================================================
  2. Sgp4GetInfo
Purpose:
	 Returns information about the current version of Sgp4Prop.dll. The information is placed in the string parameter you pass in.
	 The returned string provides information about the version number, build date, and platform.
Syntax: 
	void Sgp4GetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about Sgp4Prop.dll.
=======================================================================================
  3. Sgp4LoadFileAll
Purpose:
	 Loads SGP4-related parameters (prediction controls, JPL settings) and SGP4 elsets from a text file
Syntax: 
	int Sgp4LoadFileAll((in-Character[512]) sgp4InputFile)
Parameters: 
	sgp4InputFile: The name of the file containing SGP4-related parameters and SGP4 elsets
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  4. Sgp4SaveFile
Purpose:
	 Saves currently loaded SGP4-related parameters (SGP4 application controls, prediction controls, integration controls) to a file
	 The purpose of this function is to save the current SGP4-related settings, usually used in GUI applications, for future use.
Syntax: 
	int Sgp4SaveFile((in-Character[512]) sgp4File, (in-Integer) saveMode, (in-Integer) saveForm)
Parameters: 
	sgp4File: The name of the file in which to save the settings
	saveMode: Sgp4ecifies whether to create a new file or append to an existing one (0 = create, 1= append)
	saveForm: Sgp4ecifies the mode in which to save the file (0 = text format, 1 = not yet implemented, reserved for future)
Return Value:
	0 if the data is successfully saved to the file, non-0 if there is an error
=======================================================================================
  5. Sgp4InitSat
Purpose:
	 Initializes an SGP4 satellite from an SGP or SGP4 TLE.
	 Internally, when this function is called, Tle.dll's set of TLEs is searched for the provided satKey. If found, the associated TLE data will be used to create an SGP4 satellite which then will be added to Sgp4Prop.dll's set of satellites. Subsequent calls to propagate this satellite will use the data in this set to compute the satellite's new state.
	 
	 This routine should be called once for each satellite you wish to propagate before propagation begins, or any time the associated data that is stored by Tle.dll is changed.
	 
	 The call to this routine needs to be placed before any calls to the SGP4 propagator routines (Sgp4PropMse(), Sgp4PropDs50UTC(), etc.).
Syntax: 
	int Sgp4InitSat((in-Long) satKey)
Parameters: 
	satKey: The satellite's unique key. This key will have been returned by one of the routines in Tle.dll.
Return Value:
	0 if the satellite is successfully initialized and added to Sgp4Prop.dll's set of satellites, non-0 if there is an error.
=======================================================================================
  6. Sgp4RemoveSat
Purpose:
	 Removing a satellite from the propagator's set of satellites does not affect the corresponding TLE data loaded by calls to routines in Tle.dll.
Syntax: 
	int Sgp4RemoveSat((in-Long) satKey)
Parameters: 
	satKey: The satellite's unique key.
Return Value:
	0 if the satellite is removed successfully, non-0 if there is an error.
=======================================================================================
  7. Sgp4RemoveAllSats
Purpose:
	 Removes all currently loaded satellites from memory.
	 Calling this function removes all satellites from the set maintained by Sgp4Prop.dll. However, the TLE data loaded by Tle.dll is unaffected by this function.
Syntax: 
	int Sgp4RemoveAllSats()
Parameters: 
	None
Return Value:
	0 if all satellites are removed successfully from memory, non-0 if there is an error.
=======================================================================================
  8. Sgp4GetCount
Purpose:
	 Returns the number of GP objects currently created. 
Syntax: 
	int Sgp4GetCount()
Parameters: 
	None
Return Value:
	The number of GP objects currently created.
=======================================================================================
  9. Sgp4PropMse
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in minutes since the satellite's epoch time. 
	 The resulting data about the satellite is placed in the various reference parameters.
	 It is the users' responsibility to decide what to do with the returned value. For example, if the users want to check for decay or low altitude, they can put that logic into their own code.
	 
	 This function can be called in random time requests.
	 The following cases will result in an error:
	 
	 Semi major axis A 1.0D6
	 Eccentricity E >= 1.0 or E 
	 Mean anomaly MA>=1.0D10
	 Hyperbolic orbit E2>= 1.0
	 satKey doesn't exist in the set of loaded satellites
	 FK model not set to FK5
	 
Syntax: 
	int Sgp4PropMse((in-Long) satKey, (in-Double) mse, (out-Double) ds50UTC, (out-Double[3]) pos, (out-Double[3]) vel, (out-Double[3]) llh)
Parameters: 
	satKey: The satellite's unique key.
	mse: The time to propagate to, specified in minutes since the satellite's epoch time.
	ds50UTC: Resulting time in days since 1950, UTC.
	pos: Resulting ECI position vector (km) in True Equator and Mean Equinox of Epoch.
	vel: Resulting ECI velocity vector (km/s) in True Equator and Mean Equinox of Epoch.
	llh: Resulting geodetic latitude (deg), longitude(deg), and height (km).
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 10. Sgp4PropDs50UTC
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in days since 1950, UTC. 
	 The resulting data about the satellite is placed in the pos (position), vel (velocity), and llh (Lat/Lon/Height) parameters.
	 It is the users' responsibility to decide what to do with the returned value. For example, if the users want to check for decay or low altitude, they can put that logic into their own code.
	 The following cases will result in an error:
	 
	 Semi major axis A 1.0D6
	 Eccentricity E >= 1.0 or E 
	 Mean anomaly MA>=1.0D10
	 Hyperbolic orbit E2>= 1.0
	 satKey doesn't exist in the set of loaded satellites
	 GEO model not set to WGS-72 and/or FK model not set to FK5
	 
Syntax: 
	int Sgp4PropDs50UTC((in-Long) satKey, (in-Double) ds50UTC, (out-Double) mse, (out-Double[3]) pos, (out-Double[3]) vel, (out-Double[3]) llh)
Parameters: 
	satKey: The unique key of the satellite to propagate.
	ds50UTC: The time to propagate to, expressed in days since 1950, UTC.
	mse: Resulting time in minutes since the satellite's epoch time.
	pos: Resulting ECI position vector (km) in True Equator and Mean Equinox of Epoch.
	vel: Resulting ECI velocity vector (km/s) in True Equator and Mean Equinox of Epoch.
	llh: Resulting geodetic latitude (deg), longitude(deg), and height (km).
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 11. Sgp4PropDs50UtcPosVel
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in days since 1950, UTC. 
	 The resulting data about the satellite is placed in the pos (position), vel (velocity) parameters.
Syntax: 
	int Sgp4PropDs50UtcPosVel((in-Long) satKey, (in-Double) ds50UTC, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	satKey: The unique key of the satellite to propagate.
	ds50UTC: The time to propagate to, expressed in days since 1950, UTC.
	pos: Resulting ECI position vector (km) in True Equator and Mean Equinox of Epoch.
	vel: Resulting ECI velocity vector (km/s) in True Equator and Mean Equinox of Epoch.
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 12. Sgp4PropDs50UtcLLH
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in days since 1950, UTC. 
	 Only the geodetic information is returned by this function.
	 It is the users' responsibility to decide what to do with the returned value. For example, if the users want to check for decay or low altitude, they can put that logic into their own code.
	 
	 This function is similar to Sgp4PropDs50UTC but returns only LLH.  This function is designed especially for applications which plot ground traces.
	 The following cases will result in an error:
	 
	 Semi major axis A 1.0D6
	 Eccentricity E >= 1.0 or E 
	 Mean anomaly MA>=1.0D10
	 Hyperbolic orbit E2>= 1.0
	 satKey doesn't exist in the set of loaded satellites
	 GEO model not set to WGS-72 and/or FK model not set to FK5
	 
Syntax: 
	int Sgp4PropDs50UtcLLH((in-Long) satKey, (in-Double) ds50UTC, (out-Double[3]) llh)
Parameters: 
	satKey: The unique key of the satellite to propagate.
	ds50UTC: The time to propagate to, expressed in days since 1950, UTC.
	llh: Resulting geodetic latitude (deg), longitude(deg), and height (km).
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 13. Sgp4PropDs50UtcPos
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in days since 1950, UTC. 
	 Only the ECI position vector is returned by this function.
	 It is the users' responsibility to decide what to do with the returned value. For example, if the users want to check for decay or low altitude, they can put that logic into their own code.
	 
	 This function is similar to Sgp4PropDs50UTC but returns only ECI position vector.  This function is designed especially for applications which plot satellite position in 3D.
	 The following cases will result in an error:
	 
	 Semi major axis A 1.0D6
	 Eccentricity E >= 1.0 or E 
	 Mean anomaly MA>=1.0D10
	 Hyperbolic orbit E2>= 1.0
	 satKey doesn't exist in the set of loaded satellites
	 GEO model not set to WGS-72 and/or FK model not set to FK5
	 
Syntax: 
	int Sgp4PropDs50UtcPos((in-Long) satKey, (in-Double) ds50UTC, (out-Double[3]) pos)
Parameters: 
	satKey: The unique key of the satellite to propagate.
	ds50UTC: The time to propagate to, expressed in days since 1950, UTC.
	pos: Resulting ECI position vector (km) in True Equator and Mean Equinox of Epoch.
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 14. Sgp4GetPropOut
Purpose:
	 Retrieves propagator's precomputed results. This function can be used to obtain results from 
	 a propagation which are not made available through calls to the propagation functions themselves.
	 
	 See example in Sgp4PropMse or Sgp4PropDs50UTC.
	 
	 This function should be called immediately after a successful call to Sgp4PropMse() or Sgp4PropDs50UTC() to retrieve the desired values.
	 
	 It is the caller's responsibility to ensure that the array passed in the destArray parameter is large enough to hold the requested values. The required size can be found by looking at the destArray size column of the table below describing valid index values.
	 
	 The destArray Arrangement column lists the order of the elements in the array. It is not necessarily the subscript of the element in the array since this is language-dependent. For example, in C/C++ the first element in every array is the zero-subscripted element. In other programming languages, the subscript of the first element is 1.
	 
	 Note: This function is not thread safe, please use Sgp4PropAll() instead 
	 
	 The table below shows the values for the xf_Sgp4Out parameter:
	 
	 table
	 
	 Index
	 Index Interpretation
	 DestArray size
	 DestArray Arrangement
	 
	 1Revolution number1Revolution number (based on the Osculating Keplerian
	 Elements)
	 2Nodal Apogee Perigee3nodal period (minutes)apogee
	 (km)perigee (km)
	 3Mean Keplerian Elements6semi-major axis (km)eccentricity
	 (unitless)inclination (degree)mean anomaly (degree)right ascension of the ascending node
	 (degree)argument of perigee (degree)
	 4Osculating Keplerian Elements6Same as Mean Keplerian Elements
	 
Syntax: 
	int Sgp4GetPropOut((in-Long) satKey, (in-Integer) xf_Sgp4Out, (out-Double[*]) destArr)
Parameters: 
	satKey: The unique key of the satellite for which to retrieve results.
	xf_Sgp4Out: Specifies which propagator outputs to retrieve.
	destArr: Array to receive the resulting propagator outputs.
Return Value:
	0 if the requested information is retrieved successfully, non-0 if there is an error.
=======================================================================================
 15. Sgp4PropAll
Purpose:
	 Propagates a satellite, represented by the satKey, to the time expressed in either minutes since epoch or days since 1950, UTC. 
	 All propagation data is returned by this function.
Syntax: 
	int Sgp4PropAll((in-Long) satKey, (in-Integer) timeType, (in-Double) timeIn, (out-Double[64]) xa_Sgp4Out)
Parameters: 
	satKey: The unique key of the satellite to propagate.
	timeType: The propagation time type: 0 = minutes since epoch, 1 = days since 1950, UTC
	timeIn: The time to propagate to, expressed in either minutes since epoch or days since 1950, UTC.
	xa_Sgp4Out: The array that stores all Sgp4 propagation data, see XA_SGP4OUT_? for array arrangement
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 16. Sgp4PosVelToKep
Purpose:
	 Converts osculating position and velocity vectors to a set of mean Keplerian SGP4 elements.
	 The new position and velocity vectors are the results of using SGP4 propagator to propagate the computed sgp4MeanKep to the time specified in year and day of epoch time. 
	 They should be closely matched with the input osculating position and velocity vectors.
	 
	 The mean Keplerian elements are SGP4's Brouwer mean motion not SGP's Kozai mean motion.
	 Notes: Even if the function fails, the less acurate results may still be availalbe 
Syntax: 
	int Sgp4PosVelToKep((in-Integer) yr, (in-Double) day, (in-Double[3]) pos, (in-Double[3]) vel, (out-Double[3]) posNew, (out-Double[3]) velNew, (out-Double[6]) xa_kep)
Parameters: 
	yr: 2 or 4 digit year of the epoch time.
	day: Day of year of the epoch time.
	pos: Input osculating position vector (km).
	vel: Input osculating velocity vector (km/s).
	posNew: Resulting position vector (km) propagated from the input xa_kep.
	velNew: Resulting velocity vector (km/s) propagated from the input xa_kep.
	xa_kep: Resulting set of Sgp4 mean Keplerian elements, see XA_KEP_? for array arrangement.
Return Value:
	0 if the conversion is successful, non-0 if there is an error.
=======================================================================================
 17. Sgp4PosVelToTleArr
Purpose:
	 Converts osculating position and velocity vectors to TLE array - allows bstar/bterm, drag values to be used in the conversion if desired
	 The function is similar to Sgp4PosVelToKep but allows the user to specify agom (XP mode) and bstar/bterm values, if desired, to be used in solving for the new Keplerian elements.
	 
	 The updated elements returned in the xa_tle array is of type SGP and the mean motion is Kozai mean motion.
	 Notes: Even if the function fails, the less acurate results may still be availalbe 
Syntax: 
	int Sgp4PosVelToTleArr((in-Double[3]) pos, (in-Double[3]) vel, (inout-Double[64]) xa_tle)
Parameters: 
	pos: Input osculating position vector (km).
	vel: Input osculating velocity vector (km/s).
	xa_tle: Input/Output array containing TLE's numerical fields, see XA_TLE_? for array arrangement; required data include epoch, ephemType, drag, bstar/bterm
Return Value:
	0 if the conversion is successful, non-0 if there is an error.
=======================================================================================
 18. Sgp4ReepochTLE
Purpose:
	 Reepochs a loaded TLE, represented by the satKey, to a new epoch.
Syntax: 
	int Sgp4ReepochTLE((in-Long) satKey, (in-Double) reEpochDs50UTC, (out-Character[512]) line1Out, (out-Character[512]) line2Out)
Parameters: 
	satKey: The unique key of the satellite to reepoch.
	reEpochDs50UTC: The new epoch, express in days since 1950, UTC.
	line1Out: A string to hold the first line of the reepoched TLE.
	line2Out: A string to hold the second line of the reepoched TLE.
Return Value:
	0 if the reepoch is successful, non-0 if there is an error.
=======================================================================================
 19. Sgp4ReepochCsv
Purpose:
	 Reepochs a loaded TLE, represented by the satKey, to a new epoch in Csv format.
Syntax: 
	int Sgp4ReepochCsv((in-Long) satKey, (in-Double) reEpochDs50UTC, (out-Character[512]) csvLine)
Parameters: 
	satKey: The unique key of the satellite to reepoch.
	reEpochDs50UTC: The new epoch, express in days since 1950, UTC.
	csvLine: A string to hold the reepoched CSV.
Return Value:
	0 if the reepoch is successful, non-0 if there is an error.
=======================================================================================
 20. Sgp4SetLicFilePath
Purpose:
	 This function has been deprecated since v8.2
	 Note: The only requirement now is that "SGP4_Open_License.txt" file needs to be in those folders specified in PATH/LD_LIBRARY_PATH environment or AstroStds DLLs/SOs'
Syntax: 
	void Sgp4SetLicFilePath((in-Character[512]) licFilePath)
Parameters: 
	licFilePath: The file path to the Sgp4 Open License file
=======================================================================================
 21. Sgp4GetLicFilePath
Purpose:
	 This function has been deprecated since v8.2
	 Note: The only requirement now is that "SGP4_Open_License.txt" file needs to be in those folders specified in PATH/LD_LIBRARY_PATH environment or AstroStds DLLs/SOs'
Syntax: 
	void Sgp4GetLicFilePath((out-Character[512]) licFilePath)
Parameters: 
	licFilePath: The file path to the Sgp4 Open License file
=======================================================================================
 22. Sgp4GenEphems
Purpose:
	 Generates ephemerides for the input satellite, represented by its satKey, for the specified time span and step size
	 Notes: if arrSize isn't big enough to store all the ephemeris points, the function will exit when the ephemArr reaches
	 that many points (arrSize) and the errCode is set to IDX_ERR_WARN
Syntax: 
	int Sgp4GenEphems((in-Long) satKey, (in-Double) startTime, (in-Double) endTime, (in-Double) stepSize, (in-Integer) sgp4_ephem, (in-Integer) arrSize, (out-Double[*, 7]) ephemArr, (out-Integer) genEphemPts)
Parameters: 
	satKey: The unique key of the satellite to generate ephemerides.
	startTime: Start time expressed in days since 1950, UTC.
	endTime: End time expressed in days since 1950, UTC.
	stepSize: Step size in minutes (static); enter predefine negative values (DYN_SS_?) to request dynamic step size
	sgp4_ephem: Output ephemeris type 1=ECI, 2=J2K.
	arrSize: Size of input ephemArr
	ephemArr: Output ephemerides - 0: time in days since 1950 UTC, 1-3: pos (km), 4-6: vel (km/sec)
	genEphemPts: Actual number of ephemeris points generated (always &le; arrSize)
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 23. Sgp4GenEphems_OS
Purpose:
	 Generates ephemerides for the input TLE - in an array format - for the specified time span and step size (OS - in One Step)
	 Notes: 
	 - This function takes in TLE data directly and doesn't need to go through loading/geting satKey/initializing steps
	 - if arrSize isn't big enough to store all the ephemeris points, the function will exit when the ephemArr reaches
	   that many points (arrSize) and the errCode is set to IDX_ERR_WARN
Syntax: 
	int Sgp4GenEphems_OS((in-Double[64]) xa_tle, (in-Double) startTime, (in-Double) endTime, (in-Double) stepSize, (in-Integer) sgp4_ephem, (in-Integer) arrSize, (out-Double[*, 7]) ephemArr, (out-Integer) genEphemPts)
Parameters: 
	xa_tle: Input array containing TLE's numerical fields, see XA_TLE_? for array arrangement
	startTime: Start time expressed in days since 1950, UTC.
	endTime: End time expressed in days since 1950, UTC.
	stepSize: Step size in minutes (static); enter predefine negative values (DYN_SS_?) to request dynamic step size
	sgp4_ephem: Output ephemeris type 1=ECI, 2=J2K.
	arrSize: Size of input ephemArr
	ephemArr: Output ephemerides - 0: time in days since 1950 UTC, 1-3: pos (km), 4-6: vel (km/sec)
	genEphemPts: Actual number of ephemeris points generated (always &le; arrSize)
Return Value:
	0 if the propagation is successful, non-0 if there is an error (see error decoder in GP_ERR_?).
=======================================================================================
 24. Sgp4PropAllSats
Purpose:
	 Propagates all input satellites, represented by their satKeys, to the time expressed in days since 1950, UTC. 
Syntax: 
	int Sgp4PropAllSats((in-Long[*]) satKeys, (in-Integer) numOfSats, (in-Double) ds50UTC, (out-Double[*, 6]) ephemArr)
Parameters: 
	satKeys: The satellite keys of all input satellites
	numOfSats: The total number of satellites
	ds50UTC: The time to propagate all satelllites to, expressed in days since 1950, UTC.
	ephemArr: 0-2: pos (km), 3-5: vel (km/sec)
Return Value:
	0 if the propagation is successful, non-0 if there is an error.
=======================================================================================
 25. XpGetNativeElts
Purpose:
	 Provides the native XP equinoctial elements and rates at given time
Syntax: 
	int XpGetNativeElts((in-Long) satKey, (in-Double) ds50UTC, (out-Double[6]) xa_eqnx, (out-Double[6]) xa_eqnx_dot)
Parameters: 
	satKey: The unique key of the satellite to reepoch.
	ds50UTC: The new epoch, express in days since 1950, UTC.
	xa_eqnx: Equinoctial Elements (subtract thetaG from Longitude) at reEpoch time
	xa_eqnx_dot: Equinoctial Element rates (subtract earth rotation rate from Longitude Rate) at reEpoch time
Return Value:
	0 if the reepoch is successful, non-0 if there is an error.
=======================================================================================
 26. XpReepochGetNativeElts
Purpose:
	 Reepochs to a csv and provides the native XP equinoctial elements and rates
Syntax: 
	int XpReepochGetNativeElts((in-Long) satKey, (in-Double) reEpochDs50UTC, (out-Character[512]) csvLine, (out-Double[6]) xa_eqnx, (out-Double[6]) xa_eqnx_dot)
Parameters: 
	satKey: Input satKey
	reEpochDs50UTC: The new epoch, express in days since 1950, UTC.
	csvLine: A string to hold the reepoched CSV.
	xa_eqnx: Equinoctial Elements (subtract thetaG from Longitude) at reEpoch time
	xa_eqnx_dot: Equinoctial Element rates (subtract earth rotation rate from Longitude Rate) at reEpoch time
Return Value:
	0 if the propagation is successful, non-0 if there is an error.
=======================================================================================



