  1. TimeFuncInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes the TimeFunc DLL for use in the program. 
	 If this function returns an error, it is recommended that you stop the program immediately.
	 
	 An error will occur if you forget to load and initialize all the prerequisite DLLs, as listed in the DLL Prerequisites section of the accompanying documentation, before using this DLL.
Syntax: 
	int TimeFuncInit((in-Long) apAddr)
Parameters: 
	apAddr: The pointer that was returned from DllMain.DllMainInit
Return Value:
	Returns zero indicating the TimeFunc DLL has been initialized successfully. Other values indicate an error.
=======================================================================================
  2. TimeFuncGetInfo
Purpose:
	 Returns the information about the TimeFunc DLL.  The information is placed in the string parameter you pass in.
	 The returned string provides information about the version number, build date, and the platform of the TimeFunc DLL.
Syntax: 
	void TimeFuncGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about TimeFunc.dll.
=======================================================================================
  3. TConLoadFile
Purpose:
	 Loads timing constants data from an input file.
	 Time constants can be included directly in the main input file or they can be read from a separate file identified with "TIMFIL=[pathname\filename]".
	 
	 The input file is read in two passes. The function first looks for "TIMFIL=" lines, then it looks for timing constant data which was included directly. The result of this is that data entered using both methods will be processed, but the "TIMFIL=" data will be processed first.
	 
	 The time constants are also read in from each VCM. However, only the most recent time constants among VCMs are stored in the memory, see VCM.dll documentation.
	 See the "Time Constants Data Description" section in the accompanying TimeFunc documentation file for supported formats.
Syntax: 
	int TConLoadFile((in-Character[512]) tconFile)
Parameters: 
	tconFile: The name of the file from which to read timing constants data.
Return Value:
	0 if the input file has been loaded successfully, non-0 if error.
=======================================================================================
  4. TimeFuncLoadFile
Purpose:
	 Loads timing constants data and prediction control (6P-card) from an input file.
	 Time constants can be included directly in the main input file or they can be read from a separate file identified with "TIMFIL=[pathname\filename]".
	 
	 The input file is read in two passes. The function first looks for "TIMFIL=" lines, then it looks for timing constant data which was included directly. The result of this is that data entered using both methods will be processed, but the "TIMFIL=" data will be processed first.
	 
	 The time constants are also read in from each VCM. However, only the most recent time constants among VCMs are stored in the memory, see VCM.dll documentation.
Syntax: 
	int TimeFuncLoadFile((in-Character[512]) tconFile)
Parameters: 
	tconFile: The name of the file from which to read timing constants data and/or prediction control data.
Return Value:
	0 if the input file is loaded successfully, non-0 if there is an error.
=======================================================================================
  5. IsTConFileLoaded
Purpose:
	 Checks to see if timing constants have been loaded into memory.
	 The timing constants can be loaded from a timing constants file or from VCM(s).  See TConLoadFile, TConAddOne, and TConAddARec functions.
Syntax: 
	int IsTConFileLoaded()
Parameters: 
	None
Return Value:
	1 if timing constants data have been loaded, 0 if not.
=======================================================================================
  6. TConSaveFile
Purpose:
	 Saves currently loaded timing constants data to a file.
	 The data will be saved in the format specified by the form parameter, regardless of the format or method originally used to load it.
Syntax: 
	int TConSaveFile((in-Character[512]) tconFile, (in-Integer) saveMode, (in-Integer) saveForm)
Parameters: 
	tconFile: The name of the file in which to save the timing constants data.
	saveMode: Specifies whether to create a new file or append to an existing one. (0 = Create new file, 1= Append to existing file)
	saveForm: Specifies the format in which to save the file. (0 = SPECTER Print Record format, 1 = XML format (future implementation))
Return Value:
	0 if the data is successfully saved to the file, non-0 if there is an error.
=======================================================================================
  7. TConAddARec
Purpose:
	 Adds a timing constant record to memory. Note that this function is solely for backward compatible with legacy software.
	 Notes: only the latest timing record is stored in memory using this method. Input timing record will be skipped/ignored if it's earlier than the existing one
	 The users should use TConLoadFile or TimeFuncLoadFile to load timing constants file instead.
Syntax: 
	int TConAddARec((in-Double) refDs50UTC, (in-Double) leapDs50UTC, (in-Double) taiMinusUTC, (in-Double) ut1MinusUTC, (in-Double) ut1Rate, (in-Double) polarX, (in-Double) polarY)
Parameters: 
	refDs50UTC: Reference time (days since 1950, UTC)
	leapDs50UTC: Leap Second time (days since 1950, UTC)
	taiMinusUTC: TAI minus UTC offset at the reference time (seconds)
	ut1MinusUTC: UT1 minus UTC offset at the reference time (seconds)
	ut1Rate: UT1 rate of change versus UTC at the reference time (msec/day)
	polarX: Polar wander (X direction) at the reference time (arc-seconds)
	polarY: Polar wander (Y direction) at the reference time (arc-seconds)
Return Value:
	0 if the timing constants record is successfully added to memory, non-0 if there is an error.
=======================================================================================
  8. TConAddOne
Purpose:
	 Adds one timing constant record to memory. This API can be used to avoid TConLoadFile's file I/O
Syntax: 
	int TConAddOne((in-Double) refDs50UTC, (in-Double) taiMinusUTC, (in-Double) ut1MinusUTC, (in-Double) ut1Rate, (in-Double) polarX, (in-Double) polarY)
Parameters: 
	refDs50UTC: Reference time (days since 1950, UTC)
	taiMinusUTC: TAI minus UTC offset at the reference time (seconds)
	ut1MinusUTC: UT1 minus UTC offset at the reference time (seconds)
	ut1Rate: UT1 rate of change versus UTC at the reference time (msec/day)
	polarX: Polar wander (X direction) at the reference time (arc-seconds)
	polarY: Polar wander (Y direction) at the reference time (arc-seconds)
Return Value:
	0 if the timing constants record is successfully added to memory, non-0 if there is an error.
=======================================================================================
  9. UTCToTConRec
Purpose:
	 Retrieves the timing constants record, if exists, at the requested input time in ds50UTC.
	 If the requested record is not found, 0's will be returned for all of the constants. You can use this fact to determine whether the record was found or not. Simply check the taiMinusUTC value after calling this function. Since that value can never be 0 for a valid record, if it is 0 the record was not found.
Syntax: 
	void UTCToTConRec((in-Double) ds50UTC, (out-Double) taiMinusUTC, (out-Double) ut1MinusUTC, (out-Double) ut1Rate, (out-Double) polarX, (out-Double) polarY)
Parameters: 
	ds50UTC: Input days since 1950, UTC
	taiMinusUTC: Returned TAI minus UTC offset at requested time (seconds)
	ut1MinusUTC: Returned UT1 minus UTC offset at requested time (seconds)
	ut1Rate: Returned UT1 rate of change versus UTC at Reference time (msec/day)
	polarX: Returned interpolated polar wander (X direction) at requested time (arc-seconds)
	polarY: Returned interpolated polar wander (Y direction) at requested time (arc-seconds)
=======================================================================================
 10. TConRemoveAll
Purpose:
	 Removes all the timing constants records in memory.
Syntax: 
	int TConRemoveAll()
Parameters: 
	None
Return Value:
	0 if all timing constants records are successfully removed from memory, non-0 if there is an error.
=======================================================================================
 11. UTCToDTG20
Purpose:
	 Converts an internal time in ds50UTC to a string in DTG20 format. The resulting string takes the form "YYYY/DDD HHMM SS.SSS".
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will yield "1956/001 0000 00.000".
Syntax: 
	void UTCToDTG20((in-Double) ds50UTC, (out-Character[20]) dtg20)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	dtg20: A string to hold the result of the conversion.
=======================================================================================
 12. UTCToDTG19
Purpose:
	 Converts a time in ds50UTC to a time in DTG19 format. The resulting string takes the form "YYYYMonDDHHMMSS.SSS".
	 See "UTCToDTG20" for an example.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will yield "1956Jan01000000.000".
	 Note, the return value is in the DTG19 format "YYYYMonDDHHMMSS.SSS", not the "YY DDD HH MM SS.SSS" format.
Syntax: 
	void UTCToDTG19((in-Double) ds50UTC, (out-Character[19]) dtg19)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	dtg19: A string to hold the result of the conversion.
=======================================================================================
 13. UTCToDTG17
Purpose:
	 Converts a time in ds50UTC to a time in DTG17 format. The resulting string takes the form "YYYY/DDD.DDDDDDDD" format.
	 See "UTCToDTG20" for an example.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will yield "1956/001.00000000".
Syntax: 
	void UTCToDTG17((in-Double) ds50UTC, (out-Character[17]) dtg17)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	dtg17: A string to hold the result of the conversion.
=======================================================================================
 14. UTCToDTG15
Purpose:
	 Converts a time in ds50UTC to a time in DTG15 format. The resulting string takes the form "YYDDDHHMMSS.SSS".
	 See "UTCToDTG20" for an example.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will yield "56001000000.000".
Syntax: 
	void UTCToDTG15((in-Double) ds50UTC, (out-Character[15]) dtg15)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	dtg15: A string to hold the result of the conversion.
=======================================================================================
 15. DTGToUTC
Purpose:
	 Converts a time in one of the DTG formats to a time in ds50UTC. DTG15, DTG17, DTG19, and DTG20 formats are accepted.
	 See "UTCToDTG20" for an example.
	 During the conversion, this function processes only numbers and the '.' character. This means that you can format dtgStr in a format that makes sense. You can use spaces and the '/' character for example if you wish.
	 
	 The function can process dates from 1950 to 2049. Any input outside this range will yield "0.0".
	 This function supports DTG19 inputs in both "YY DDD HH MM SS.SSS" and "YYYYMonDDHHMMSS.SSS" formats.
Syntax: 
	double DTGToUTC((in-Character[20]) dtg)
Parameters: 
	dtg: The string to convert. Can be any of the DTG formats previously documented.
Return Value:
	The number of days since 1950, UTC. Partial days may be returned.
=======================================================================================
 16. UTCToTAI
Purpose:
	 Converts a time in ds50UTC to a time in ds50TAI using timing constants records in memory. 
	 If no timing constants records were loaded, ds50UTC and ds50TAI are the same.
	 Partial days may be returned.
Syntax: 
	double UTCToTAI((in-Double) ds50UTC)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
Return Value:
	The number of days since 1950, TAI. Partial days may be returned.
=======================================================================================
 17. UTCToUT1
Purpose:
	 Converts a time in ds50UTC to a time in ds50UT1 using timing constants records in memory. 
	 If no timing constants records were loaded, ds50UTC and ds50UT1 are the same. 
	 Partial days may be returned.
Syntax: 
	double UTCToUT1((in-Double) ds50UTC)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
Return Value:
	The number of days since 1950, UT1. Partial days may be returned.
=======================================================================================
 18. UTCToET
Purpose:
	 Converts a time in ds50UTC to a time in ds50ET (Ephemeris Time/Terrestrial Time) using timing constants records in memory. 
Syntax: 
	double UTCToET((in-Double) ds50UTC)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
Return Value:
	The number of days since 1950, ET (Ephemeris Time/Terrestrial Time). Partial days may be returned.
=======================================================================================
 19. TAIToUTC
Purpose:
	 Converts a time in ds50TAI to a time in ds50UTC using timing constants records in memory. 
	 If no timing constants records were loaded, ds50TAI and ds50UTC are the same. 
	 Partial days may be returned.
Syntax: 
	double TAIToUTC((in-Double) ds50TAI)
Parameters: 
	ds50TAI: Days since 1950, TAI to be converted.
Return Value:
	The number of Days since 1950, UTC. Partial days may be returned.
=======================================================================================
 20. TAIToUT1
Purpose:
	 Converts a time in ds50TAI to a time in ds50UT1 using timing constants records in memory. 
	 If no timing constants records were loaded, ds50TAI and ds50UT1 are the same. 
	 Partial days may be returned.
Syntax: 
	double TAIToUT1((in-Double) ds50TAI)
Parameters: 
	ds50TAI: Days since 1950, TAI to be converted.
Return Value:
	The number of days since 1950, UT1. Partial days may be returned.
=======================================================================================
 21. YrDaysToUTC
Purpose:
	 Converts a year and a number of days to a time in ds50UTC. 
	 Partial days may be returned.
Syntax: 
	double YrDaysToUTC((in-Integer) year, (in-Double) dayOfYear)
Parameters: 
	year: Two or four digit years are accepted.
	dayOfYear: The day of year. Partial days can be specified.
Return Value:
	The number of days since 1950, UTC. Partial days may be returned.
=======================================================================================
 22. UTCToYrDays
Purpose:
	 Converts a time in ds50UTC to a year and day of year.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will yield Year=1956, Day=1.0.
Syntax: 
	void UTCToYrDays((in-Double) ds50UTC, (out-Integer) year, (out-Double) dayOfYear)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	year: A reference to a variable in which to place the 4-digit year.
	dayOfYear: A reference to a variable in which to place the day of year. Partial days may be expressed in this variable.
=======================================================================================
 23. TimeComps1ToUTC
Purpose:
	 Converts a set of time components (year, day of year, hour, minute, second) to a time in ds50UTC. 
	 Partial days may be returned.
	 See "TimeComps2ToUTC" for a function which takes a month and day instead of a day of year value.
Syntax: 
	double TimeComps1ToUTC((in-Integer) year, (in-Integer) dayOfYear, (in-Integer) hh, (in-Integer) mm, (in-Double) sss)
Parameters: 
	year: Two or four digit years are accepted.
	dayOfYear: The day of year, expressed as a whole number.
	hh: The hour.
	mm: The minute.
	sss: The second, including partial seconds if desired.
Return Value:
	The number of Days since 1950, UTC. Partial days may be returned.
=======================================================================================
 24. UTCToTimeComps1
Purpose:
	 Converts a time in ds50UTC to its individual components (year, day of year, hour, minute, second).
	 See "TimeComps1ToUTC" for an example.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will be reset to that value.
Syntax: 
	void UTCToTimeComps1((in-Double) ds50UTC, (out-Integer) year, (out-Integer) dayOfYear, (out-Integer) hh, (out-Integer) mm, (out-Double) sss)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	year: A reference to a variable in which to store the 4-digit year.
	dayOfYear: A reference to a variable in which to store the day of year.
	hh: A reference to a variable in which to store the hour.
	mm: A reference to a variable in which to store the minute.
	sss: A reference to a variable in which to store the second. Partial seconds may be expressed if necessary.
=======================================================================================
 25. TimeComps2ToUTC
Purpose:
	 Converts a set of time components (year, month, day of month, hour, minute, second) to a time in ds50UTC. 
	 Partial days may be returned.
	 See "TimeComps1ToUTC" for a function which takes a day of year value instead of a month and day.
Syntax: 
	double TimeComps2ToUTC((in-Integer) year, (in-Integer) mon, (in-Integer) dayOfMonth, (in-Integer) hh, (in-Integer) mm, (in-Double) sss)
Parameters: 
	year: Two or four digit years are accepted.
	mon: The month.
	dayOfMonth: The day of the month.
	hh: The hour.
	mm: The minute.
	sss: The second.
Return Value:
	The number of Days since 1950, UTC. Partial days may be returned.
=======================================================================================
 26. UTCToTimeComps2
Purpose:
	 Converts a time in ds50UTC to its individual components (year, month, day of month, hour, minute, second).
	 See "TimeComps1ToUTC" for an example.
	 The input ds50UTC must be greater than 2192.0, which corresponds to a time later than 1st Jan 1956. Any input value less than or equal to 2192.0 will be reset to that value.
Syntax: 
	void UTCToTimeComps2((in-Double) ds50UTC, (out-Integer) year, (out-Integer) month, (out-Integer) dayOfMonth, (out-Integer) hh, (out-Integer) mm, (out-Double) sss)
Parameters: 
	ds50UTC: Days since 1950, UTC to be converted.
	year: A reference to a variable in which to store the 4-digit year.
	month: A reference to a variable in which to store the month.
	dayOfMonth: A reference to a variable in which to store the day of the month.
	hh: A reference to a variable in which to store the hour.
	mm: A reference to a variable in which to store the minute.
	sss: A reference to a variable in which to store the second. Partial seconds may be expressed if necessary.
=======================================================================================
 27. ThetaGrnwch
Purpose:
	 Computes right ascension of Greenwich at the specified time in ds50UT1. 
	 The Fk constants as you currently have them set up in EnvConst.dll are used.
	 EnvConst.dll is not marked as a direct dependency of TimeFunc.dll. However, it obviously must be loaded in order to be able to use this function since you must first obtain a handle via the EnvGetFkPtr() function.
Syntax: 
	double ThetaGrnwch((in-Double) ds50UT1, (in-Long) lenvFk)
Parameters: 
	ds50UT1: Input days since 1950, UT1.
	lenvFk: A handle to the FK data. Use the value returned from EnvGetFkPtr(), located in EnvConst.dll.
Return Value:
	Right ascension of Greenwich in radians at the specified time.
=======================================================================================
 28. ThetaGrnwchFK4
Purpose:
	 Computes right ascension of Greenwich at the specified time in ds50UT1 using the Fourth Fundamental Catalogue (FK4).
	 There is no need to load or initialize EnvConst.dll when computing right ascension using this function.
Syntax: 
	double ThetaGrnwchFK4((in-Double) ds50UT1)
Parameters: 
	ds50UT1: Days since 1950, UT1.
Return Value:
	Right ascension of Greenwich in radians at the specified time using FK4.
=======================================================================================
 29. ThetaGrnwchFK5
Purpose:
	 Computes right ascension of Greenwich at the specified time in ds50UT1 using the Fifth Fundamental Catalogue (FK5).
	 There is no need to load or initialize EnvConst.dll when computing right ascension using this function.
Syntax: 
	double ThetaGrnwchFK5((in-Double) ds50UT1)
Parameters: 
	ds50UT1: Input days since 1950, UT1.
Return Value:
	Right ascension of Greenwich in radians at the specified time using FK5.
=======================================================================================
 30. TimeConvFrTo
Purpose:
	 This function is intended for future use.  No information is currently available.
	 This function is intended for future use.  No information is currently available.
Syntax: 
	void TimeConvFrTo((in-Integer) funcIdx, (in-Double[*]) frArr, (out-Double[*]) toArr)
Parameters: 
	funcIdx: Input function index
	frArr: Input
	toArr: Output
=======================================================================================
 31. Get6P
Purpose:
	 Returns prediction control parameters. The parameters are placed in the reference variables passed to this function.
Syntax: 
	void Get6P((out-Integer) startFrEpoch, (out-Integer) stopFrEpoch, (out-Double) startTime, (out-Double) stopTime, (out-Double) interval)
Parameters: 
	startFrEpoch: Indicates whether startTime is expressed in minutes since epoch. (startFrEpoch = 1: startTime is in minutes since epoch, startFrEpoch = 0: startTime is in days since 1950, UTC)
	stopFrEpoch: Indicates whether stopTime is expressed in minutes since epoch. (stopFrEpoch = 1: stopTime is in minutes since epoch, stopFrEpoch = 0: stopTime is in days since 1950, UTC)
	startTime: The start time. Depending on the value of startFrEpoch, start time can be expressed in minutes since epoch or days since 1950, UTC.
	stopTime: The stop time. Depending on the value of stopFrEpoch, stop time can be expressed in minutes since epoch or days since 1950, UTC.
	interval: The Step size (min).
=======================================================================================
 32. Set6P
Purpose:
	 Sets prediction control parameters.
Syntax: 
	void Set6P((in-Integer) startFrEpoch, (in-Integer) stopFrEpoch, (in-Double) startTime, (in-Double) stopTime, (in-Double) interval)
Parameters: 
	startFrEpoch: Indicates whether startTime is expressed in minutes since epoch. (startFrEpoch = 1: Value of startTime is in minutes since epoch, startFrEpoch = 0: Value of startTime is in days since 1950, UTC)
	stopFrEpoch: Indicates whether stopTime is expressed in minutes since epoch. (stopFrEpoch = 1: Value of stopTime is in minutes since epoch, stopFrEpoch = 0: Value of stopTime is in days since 1950, UTC)
	startTime: Start time.
	stopTime: Stop time.
	interval: Step size (min).
=======================================================================================
 33. Get6PCardLine
Purpose:
	 Returns current prediction control parameters in form of a 6P-Card string.
Syntax: 
	void Get6PCardLine((out-Character[512]) card6PLine)
Parameters: 
	card6PLine: The resulting 6P-Card string.
=======================================================================================
 34. TConTimeSpan
Purpose:
	 Returns the time span of the loaded timing constants - the earliest and latest of loaded timing constant records
Syntax: 
	void TConTimeSpan((out-Integer) numOfRecs, (out-Double) frTimeDs50UTC, (out-Double) toTimeDs50UTC)
Parameters: 
	numOfRecs: Number of timing constants records loaded in memory (zero if timing constants aren't loaded)
	frTimeDs50UTC: The time, in days since 1950 UTC,  of the earliest timing constant record loaded in memory (zero if timing constants aren't loaded)
	toTimeDs50UTC: The time, in days since 1950 UTC,  of the latest timing constant record loaded in memory (zero if timing constants aren't loaded)
=======================================================================================



