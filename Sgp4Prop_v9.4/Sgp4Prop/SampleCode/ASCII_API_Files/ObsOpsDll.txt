  1. ObsOpsInit
Purpose:
	 Notes: This function has been deprecated since v9.0.    
	 Initializes ObsOps DLL for use in the program
Syntax: 
	int ObsOpsInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit()
Return Value:
	0 if ObsOps.dll is initialized successfully, non-0 if there is an error
=======================================================================================
  2. ObsOpsGetInfo
Purpose:
	 Returns information about the current version of ObsOps DLL. 
	 The information is placed in the string parameter passed in.
Syntax: 
	void ObsOpsGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about ObsOps.dll
=======================================================================================
  3. IomodLoadFile
Purpose:
	 Loads Iomod parameters from an input text file
Syntax: 
	int IomodLoadFile((in-Character[512]) iomodInputFile)
Parameters: 
	iomodInputFile: The name of the file containing IOMOD-related parameters
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  4. IomodLoadFileAll
Purpose:
	 Loads Iomod control parameters and all Iomod related data (environment, time, sensors, obs) from an input text file
Syntax: 
	int IomodLoadFileAll((in-Character[512]) iomodInputFile)
Parameters: 
	iomodInputFile: The name of the file containing Iomod control parameters and all Iomod related data
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  5. IomodSaveFile
Purpose:
	 Saves any currently loaded IOMOD-related settings to a file
Syntax: 
	int IomodSaveFile((in-Character[512]) iomodFile, (in-Integer) saveMode, (in-Integer) saveForm)
Parameters: 
	iomodFile: The name of the file in which to save the settings
	saveMode: Specifies whether to create a new file or append to an existing one (0 = create, 1= append)
	saveForm: Specifies the mode in which to save the file (0 = text format, 1 = not yet implemented, reserved for future)
Return Value:
	0 if the data is successfully saved to the file, non-0 if there is an error
=======================================================================================
  6. IomodGetIpCard
Purpose:
	 Builds and returns the IOMOD-parameter card (IP-Card) from the current IOMOD settings
Syntax: 
	void IomodGetIpCard((out-Character[512]) iomodIPCard)
Parameters: 
	iomodIPCard: The resulting IOMOD IP card
=======================================================================================
  7. IomodGetIpAll
Purpose:
	 Retrieves all IOMOD parameters with a single function call
Syntax: 
	void IomodGetIpAll((out-Integer) printIOHG, (out-Integer) useFirst3Obs, (out-Integer) satNum, (out-Integer) sortOrder, (out-Character[8]) satName, (out-Integer) runDC, (out-Integer) runRotas, (out-Double[128]) extArr)
Parameters: 
	printIOHG: Control flag for IOHG advisory prints: 0=do not print IOHG information, 1=print IOHG
	useFirst3Obs: Use first 3 obs flag
	satNum: Satelite number
	sortOrder: Obs sorting order
	satName: International designator
	runDC: Run DC flag: 1=yes, 0=no
	runRotas: Run ROTAS flag: 1=yes, 0=no
	extArr: The extra array (future use)
=======================================================================================
  8. IomodSetIpAll
Purpose:
	 Sets all IOMOD parameters with a single function call
Syntax: 
	void IomodSetIpAll((in-Integer) printIOHG, (in-Integer) useFirst3Obs, (in-Integer) satNum, (in-Integer) sortOrder, (in-Character[8]) satName, (in-Integer) runDC, (in-Integer) runRotas, (in-Double[128]) extArr)
Parameters: 
	printIOHG: Control flag for IOHG advisory prints: 0=do not print IOHG information, 1=print IOHG
	useFirst3Obs: Use first 3 obs flag
	satNum: Satelite number
	sortOrder: Obs sorting order
	satName: International designator
	runDC: Run DC flag: 1=yes, 0=no
	runRotas: Run ROTAS flag: 1=yes, 0=no
	extArr: The extra array (future use)
=======================================================================================
  9. IomodGetIpField
Purpose:
	 Retrieves the value of a specified IOMOD parameter
	 
	 The table below indicates which index values for the xf_IP parameter:
	 
	 table
	 
	 xf_IP named constants/values
	 Interpretation
	 
	 XF_IP_PRINTIOHG  = 1control flag for IOHG advisory prints: 0=do not print IOHG information, 1=print
	 IOHG
	 XF_IP_USE1ST3OBS = 2use first 3 obs flag
	 XF_IP_SATNUM     = 3satelite number
	 XF_IP_SORTORDER  = 4obs sorting order
	 XF_IP_SATNAME    = 5international designator 
	 XF_IP_RUNDC      = 6run DC flag: 1=yes, 0=no [deprecated]
	 XF_IP_RUNROTAS   = 7run ROTAS flag: 1=yes, 0=no [deprecated]
	 
Syntax: 
	void IomodGetIpField((in-Integer) xf_IP, (out-Character[512]) retVal)
Parameters: 
	xf_IP: Predefined number specifying which IOMOD parameter to retrieve
	retVal: A string to hold the value of the requested IOMOD parameter
=======================================================================================
 10. IomodSetIpField
Purpose:
	 Sets the value of a specified IOMOD parameter
	 See IomodGetIpField for a description of the xf_IP parameter.
Syntax: 
	void IomodSetIpField((in-Integer) xf_IP, (in-Character[512]) valueStr)
Parameters: 
	xf_IP: Predefined number specifying which IOMOD parameter to set, see XF_IP_? for field specification
	valueStr: The new value of the specified field, expressed as a string
=======================================================================================
 11. ManyObsToPosVel
Purpose:
	 Computes initial orbit vector from many observations using Herrick-Gibbs method
Syntax: 
	int ManyObsToPosVel((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel, (out-Long[3]) arr3ObsKeys)
Parameters: 
	obsKeyArr: The obsKey array contains obsKeys that are available for IOMOD
	arrSize: The size of the obsKeyArr
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
	arr3ObsKeys: The resulting 3 obsKeys that were used by IOMOD
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 12. ThreeObsToPosVel
Purpose:
	 Computes initial orbit vector from three selected observations using Herrick-Gibbs method
Syntax: 
	int ThreeObsToPosVel((in-Long[3]) arr3ObsKeys, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	arr3ObsKeys: The three input obsKeys
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 13. Iomod_OS
Purpose:
	 Computes initial orbit vector directly from the input sensor/observation data - thread safe
Syntax: 
	int Iomod_OS((in-Double[16]) xa_senLoc, (in-Integer) numObs, (in-Double[*, 64]) xa_obsArr, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	xa_senLoc: Array contains sensor location data, see XA_SENLOC_? for array arrangement
	numObs: Number of input obs in xa_obsArr
	xa_obsArr: Array of input obs.  see XA_OBS_?
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 14. TwoObsToPosVel
Purpose:
	 Computes initial orbit vector from two selected observations using Two-Ob method
	 Note: Two-Ob method only works with ob types: 2, 3, 4, P, and V
Syntax: 
	int TwoObsToPosVel((in-Long[2]) arr2ObsKeys, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	arr2ObsKeys: The two input obsKeys
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 15. AnglesOnlyToPosVel
Purpose:
	 Computes the initial orbit vector from three selected angle-only observations using the Gooding Algorithm.
Syntax: 
	int AnglesOnlyToPosVel((in-Long[3]) arr3ObsKeys, (in-Double) range1, (in-Double) range3, (in-Integer) nhrev, (in-Integer) ind, (in-Integer) maxIt, (in-Double) pdInc, (in-Double) criVal, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel)
Parameters: 
	arr3ObsKeys: The three input obsKeys
	range1: The range guess to first observation (km)
	range3: The range guess to third observation (km)
	nhrev: Number of half revolutions
	ind: Solution number
	maxIt: Maximum number of iterations
	pdInc: Partial derivative increment
	criVal: Convergence criterion
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 16. FindTrack
Purpose:
	 Computes the track length of a track whose first observation started at the input startIdx.
	 This routine can be used in a loop to find all the tracks in the observation list.
	 Remember to sort obs in the obsKeyArr in the ascending order of sensor, satno, obsType, time, elev 
	 by calling ObsGetLoaded(-6, pObsKeys) before feeding the array to this routine
Syntax: 
	int FindTrack((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (in-Integer) startIdx, (out-Integer) trackLength)
Parameters: 
	obsKeyArr: The input obsKeyArr
	arrSize: The size of the obsKeyArr (number of obs)
	startIdx: The index of the first observation to start computing the track length
	trackLength: The track length (trackLength = 1 for single obs)
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 17. ATrackToPosVel
Purpose:
	 Computes initial orbit vector from a track of obs. Also returns the three obs in the track that are used by IOMOD
Syntax: 
	int ATrackToPosVel((in-Long[*]) obsKeys, (in-Integer) trackStartIdx, (in-Integer) trackLength, (out-Double) timeDs50UTC, (out-Double[3]) pos, (out-Double[3]) vel, (out-Long[3]) trackObsKeys)
Parameters: 
	obsKeys: The input obsKeyArr
	trackStartIdx: The index of the first observation that starts the track
	trackLength: The track length
	timeDs50UTC: The resulting time of the new vector in ds50UTC
	pos: The resulting position vector (km)
	vel: The resulting velocity vector (km/s)
	trackObsKeys: ObsKeys of the tree obs that are used by IOMOD
Return Value:
	0 if the computation is successful, non-0 if there is an error
=======================================================================================
 18. TriGetDefParams
Purpose:
	 Returns the default values of the triangulation settings
Syntax: 
	void TriGetDefParams((out-Double[32]) xa_tri)
Parameters: 
	xa_tri: Triangulation parameters.  see XA_TRI_?
=======================================================================================
 19. TriComputeToFile
Purpose:
	 Triangulates the input obs and write generated obs with range data to the specified output file
Syntax: 
	int TriComputeToFile((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (in-Double[32]) xa_tri, (in-Character[512]) toFile)
Parameters: 
	obsKeyArr: The input obsKeyArr contains obsKeys that are available for triangulation
	arrSize: The size of the obsKeyArr (number of obs)
	xa_tri: Triangulation parameters.  see XA_TRI_?
	toFile: Output file that stores the generated obs with the computed range data
Return Value:
	0 if successful, non-0 if there is an error
=======================================================================================
 20. TriCompute1
Purpose:
	 Triangulates the input obs and returns the overlap and polyfit information; creates and loads obs with range data into memory and returns their associated obsKeys
Syntax: 
	int TriCompute1((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (in-Double[32]) xa_tri, (out-Integer) numOvlps, (out-Double[*, 8]) xa_ovlp, (out-Integer) numFits, (out-Double[*, 32]) xa_fit, (in-Integer) maxGenObs, (out-Integer) nGenObs, (out-Long[*]) genObsKeys)
Parameters: 
	obsKeyArr: The input obsKeyArr contains obsKeys that are available for triangulation
	arrSize: The size of the obsKeyArr (number of obs)
	xa_tri: Triangulation parameters.  see XA_TRI_?
	numOvlps: Number of overlap tracks
	xa_ovlp: Overlap data.  see XA_OVLP_?
	numFits: Number of qualified tracks for fitting
	xa_fit: Polyfit data.  see XA_FIT_?
	maxGenObs: Maximum number of generated obs
	nGenObs: Number of actual obs generated by triangulation process (nGenObs always lt or eq maxGenObs)
	genObsKeys: Generate obs with range, then load them into memory, and return the obsKeys of all generated obs
Return Value:
	0 if successful, non-0 if there is an error
=======================================================================================
 21. TriCompute2
Purpose:
	 Triangulates the input obs and returns the overlap and polyfit information 
Syntax: 
	int TriCompute2((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (in-Double[32]) xa_tri, (out-Integer) numOvlps, (out-Double[*, 8]) xa_ovlp, (out-Integer) numFits, (out-Double[*, 32]) xa_fit)
Parameters: 
	obsKeyArr: The input obsKeyArr contains obsKeys that are available for triangulation
	arrSize: The size of the obsKeyArr (number of obs)
	xa_tri: Triangulation parameters.  see XA_TRI_?
	numOvlps: Number of overlap tracks
	xa_ovlp: Overlap data.  see XA_OVLP_?
	numFits: Number of qualified tracks for fitting
	xa_fit: Polyfit data.  see XA_FIT_?
Return Value:
	0 if successful, non-0 if there is an error
=======================================================================================
 22. TriCompute3
Purpose:
	 Triangulates the input obs; creates and loads obs with range data (by triangulation) into memory and returns their associated obsKeys
Syntax: 
	int TriCompute3((in-Long[*]) obsKeyArr, (in-Integer) arrSize, (in-Double[32]) xa_tri, (in-Integer) maxGenObs, (out-Integer) nGenObs, (out-Long[*]) genObsKeys)
Parameters: 
	obsKeyArr: The input obsKeyArr contains obsKeys that are available for triangulation
	arrSize: The size of the obsKeyArr (number of obs)
	xa_tri: Triangulation parameters.  see XA_TRI_?
	maxGenObs: Maximum number of generated obs
	nGenObs: Number of actual obs generated by triangulation process (nGenObs always lt or eq maxGenObs)
	genObsKeys: Generate obs with range, then load them into memory, and return the obsKeys of all generated obs
Return Value:
	0 if successful, non-0 if there is an error
=======================================================================================
 23. GetWaterfallAlt
Purpose:
	 Returns the default values of the waterfall altitude (km)
Syntax: 
	double GetWaterfallAlt()
Parameters: 
	None
Return Value:
	The default altitude (km) being used in the Waterfall algorithm
=======================================================================================
 24. AnglesOnlyToLLH
Purpose:
	 Converts angle-only observation to lat/lon/height positions
Syntax: 
	int AnglesOnlyToLLH((in-Long) obsKey, (in-Double) assumedAltitude, (out-Double[2]) rho, (out-Double[2, 3]) llhs, (out-Integer) numSols)
Parameters: 
	obsKey: The unique key of the angle-only observation that needs to be converted by the waterfall calculation
	assumedAltitude: The input assumed altitude (km) to calculate LLH (set to 0 to indicate default altitude should be used)
	rho: The ouput calculated range to sphere of assumed altitude
	llhs: The calculated LLH at sphere of assumed altitude
	numSols: Number of Waterfall Solutions
Return Value:
	Returns 0 if the conversion is successful, non-0 if there is an error
=======================================================================================
 25. LombLengthOut
Purpose:
	 Calculates length of output arrays for Lomb
	 Used to allocated px, py, prob before call to Lomb
Syntax: 
	int LombLengthOut((in-Double) ofac, (in-Double) hifac, (in-Integer) nSample)
Parameters: 
	ofac: Oversample factor, typical value is "4" or "5"
	hifac: Ratio of highest frequency to Nyquist frequency
	nSample: Number of samples for x and y
Return Value:
	Used to allocated px, py, prob before call to Lomb
=======================================================================================
 26. Lomb
Purpose:
	 Creates Lomb-Scargle periodogram.  Reference: Numerical Recipes   
	 Used to find frequencies in unevenly sampled data, such as Visual Magnitude vs. Time
Syntax: 
	void Lomb((in-Double[*]) x, (in-Double[*]) y, (in-Integer) nSample, (in-Double) ofac, (in-Double) hifac, (out-Double[*]) px, (out-Double[*]) py, (out-Double[*]) prob, (out-Double) pxmax, (out-Double) pymax, (out-Double) probMax)
Parameters: 
	x: Array times to input (units don't matter, can be days, seconds, etc...), length of nSample
	y: Array of data (such as Visual Magnitude) associated with times to input, length of nSample
	nSample: Number of samples for x and y
	ofac: Oversample factor, typical value is "4" or "5"
	hifac: Ratio of highest frequency to Nyquist frequency
	px: Array of frequencies, should be of length (0.5d0*ofac*hifac*nSample)
	py: Array of powers associated with frequencies, should be of length (0.5d0*ofac*hifac*nSample)
	prob: Array of false alarm probabilities corresponding to py, should be of length (0.5d0*ofac*hifac*nSample)
	pxmax: Most powerful frequency
	pymax: Power of most powerful frequency
	probMax: False alarm probability of most powerful frequency
=======================================================================================
 27. LombFalseProb
Purpose:
	 Find False Alarm Probablility of given Power (lower is less likely to be a false alarm)
Syntax: 
	double LombFalseProb((in-Double) py, (in-Integer) nout, (in-Double) ofac)
Parameters: 
	py: Power
	nout: Number of output frequencies (0.5*ofac*hifac*n)
	ofac: Oversample factor
Return Value:
	False Alarm Probability
=======================================================================================
 28. LombFalseProbInv
Purpose:
	 Find Power of given False Alarm Probablility
Syntax: 
	double LombFalseProbInv((in-Double) prob, (in-Integer) nout, (in-Double) ofac)
Parameters: 
	prob: False Alarm Probability
	nout: Number of output frequencies (0.5*ofac*hifac*n)
	ofac: Oversample factor
Return Value:
	Power
=======================================================================================
 29. LombLengthCoef
Purpose:
	 Calculate length of output for LombWaveFit
Syntax: 
	int LombLengthCoef((in-Integer) nFreq)
Parameters: 
	nFreq: Number of frequencies of interest
Return Value:
	Returned number of coefficients to use in LombWaveFit and LombCalcValueFromTime, use to allocate coeffs
=======================================================================================
 30. LombWaveFit
Purpose:
	 Fits user defined frequencies to data to find the magnitudes
	 Solves the equation
	 y= C + sum( A(i)*sin(2*pi*freq(i)*t) + B(i)*sin(2*pi*freq(i)*t)  )
	 For coefficients A and B corresponding to each frequency
Syntax: 
	void LombWaveFit((in-Double[*]) x, (in-Double[*]) y, (in-Integer) nSamples, (in-Double[*]) freq, (in-Integer) nfreq, (out-Double[*]) coeffs)
Parameters: 
	x: Times, length of nSamples
	y: Data, length of nSamples
	nSamples: Number of input samples, length of x and y
	freq: Set of frequencies to fit, should not be same as output of Lomb, lenth of nfreq
	nfreq: Number of frequencies, length of freq
	coeffs: Resulting coefficients(A(1) B(1) ... A(nfreq) B(nfreq) C), will have length(2*nfreq+1)
=======================================================================================
 31. LombCalcValueFromTime
Purpose:
	 Calculate value of y given time, x, 
	 and frequencies and magnitudes that were gotten from wavefit
	 solves the equation
	 y= C + sum( A(i)*sin(2*pi*freq(i)*t) + B(i)*sin(2*pi*freq(i)*t)  )
	 for y
Syntax: 
	double LombCalcValueFromTime((in-Double) x, (in-Double[*]) mags, (in-Double[*]) freq, (in-Integer) nfreq)
Parameters: 
	x: Time
	mags: Magnitudes from wavefit, length of (2*nfreq+1)
	freq: Frequencies of interest, length of nfreq
	nfreq: Number of frequencies of interest
Return Value:
	resulting y value
=======================================================================================
 32. AngleBetweenObs
Purpose:
	 Given two observations, calculate the angle between them
	 Supports obsType 1,2,3,4,5,8,9,18,19
Syntax: 
	void AngleBetweenObs((in-Long) obsKey1, (in-Long) obsKey2, (out-Double) angSep, (out-Integer) errCode)
Parameters: 
	obsKey1: 1st obsKey
	obsKey2: 2nd obsKey
	angSep: Angular Separation(Deg)
	errCode: Error Code, 1 - Obs times not equal (will still do calculation), 2 - Calculation errored out, sensor numbers are different, or unsupported obs type
=======================================================================================



