  1. SaasInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes Saas dll for use in the program
Syntax: 
	int SaasInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit()
Return Value:
	0 if Saas.dll is initialized successfully, non-0 if there is an error
=======================================================================================
  2. SaasGetInfo
Purpose:
	 Returns information about the current version of Saas.dll. The information is placed in the
	 string parameter passed-in
Syntax: 
	void SaasGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold information about the Saas.dll
=======================================================================================
  3. SaasGetResults
Purpose:
	 SaasGetResults executes SAAS (Satellite Attack Assessment Software) also known as DA ASAT
	   (Direct Ascent Anti-Satellite). 
	 
	 
	 SAAS software description:
	 
	   SaasGetResults executes SAAS (Satellite Attack Assessment Software) also known as DA ASAT
	   (Direct Ascent Anti-Satellite). Developed by HQ SpOC, SAAS assesses attack opportunities
	   for a direct ascent ASAT attack, similar to F-15 ASAT of the 1980's.  By its use of SGP4
	   propagation, SAAS is designed as a high-speed screening tool to identify potential target
	   objects in vulnerable orbits relative to the specified missile site/capability; however it
	   should not be considered a precision analysis model.
	 
	 
	 SAAS algorithm:
	 
	   SAAS computes a ring of potential intercept points around a launch site.  The size of the
	   ring (also known as 'the kill ring') is based on the altitude limit and missile profile
	   specified for the direct ascent booster.  Each target altitude has a unique kill ring with
	   two intercept points, defined as 'pierce/entry' and exit.  The ring of potential intercept
	   points span over 360 degrees azimuth above the launch site.  The ring of intercept points
	   is circumscribed by a cone looking up from the launch site.  Target orbits are flown
	   (propagated by SGP4) over a specified period of interest and penetrations of the launch site
	   cone determine a viable intercept passes.  The time of the cone penetration, and/or cone
	   exit, are the 'intercept times'.  (Note that as the target altitude decreases, the intercept
	   point moves farther down-range from the launch site; then it moves up-range after the
	   specified missile max range is reached.) The azimuth from the launch site to the cone
	   penetration point is the launch azimuth.  Lastly, the launch time is determined as the cone
	   penetration time minus the missile time-of-flight to the target.
	 
	 
	 INPUTS include:
	 
	 
	   table
	   (a) a set of target input SGP4 two-line element sets (TLEs)
	   (b) coefficient-based missile profile used for the direct ascent attack trajectory
	   (c) missile profile limits including min and max height, maximum sun angle, and maximum
	        attack angle
	   (d) ground missile location(s) including N. latitude, E. longitude, and height for one or
	        more test sites
	   (e) a specified evaluation period of interest for assessment
	 
	 
	 
	 OUTPUTS include:
	   (a) attack launch time, launch azimuth, and intercept time, for each viable target pass over
	        a launch site within the specified period of interest
	 
	 Order of elements in the input xa_msl array:
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	   0 missile profile minimum height limit [km]
	   1 missile profile maximum height limit [km]
	   2 maximum allowed solar aspect angle [deg], pass qualifies 
	   3 maximum allowed missile attack angle [deg], pass qualifies only 
	   4 rejection flag*: -1=reject negative; 0=reject neither negative nor positive; 1=reject positive. 
	   5 missile profile time coefficient for the X^2 term
	   6 missile profile time coefficient for the X term
	   7 missile profile time constant for the C term
	   8 missile profile range coefficient for the X^2 term
	   9 missile profile range coefficient for the X term
	  10 missile profile range constant for the C term
	  11-31 unused at this time
	    
	  (*) The missile rejection flag designation is used by SAAS to check for sign of the desired
	      attack angles in the results.  It evaluates the sign (+ or -) of the computed attack
	      angle vs. the maximum allowed attack angle.  For example if set to -1, only positive
	      attack angles less than the max attack angle will be returned.  If set to 0, either a
	      positive or negative computed attack angle is acceptable as long as long it is less
	      than the max allowed attack angle.  If set to 1, only negative attack angles less than
	      the maximum will be accepted and returned.
	 
	 Order of elements in the input xa_ls array:   
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	  0 launch test site's latitude (+North, -South)
	  1 launch test site longitude (+East, -West)
	  2 launch test site local height above Earth average equatorial radius (meters). 
	  3-7 unused at this time
	    
	 
	 Order of elements in the input xa_saasRun array:
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	  0 Maximum number of penetration points allowed. 
	  1 SAAS assessment period-of-interest (POI) start time in fractional days since 1950, UTC
	  2 SAAS assessment period-of-interest (POI) stop time in fractional days since 1950, UTC. 
	 								 Note: if a stop time is not specified, it is defaulted by SAAS to 1 day after the specified start
	 								 time
	  3 Specified half-angle of attack cone, where if set to 0, SAAS will automatically determine the attack cone half angle. 
	   								 Note:  if a input cone angle is > 90 degrees, it is defaulted by SAAS to 90
	   								 degrees
	  4-7 unused at this time
	    
	 
	 Order of elements in the returned in the first dimension of xa_satPen array (second array
	  dimension allows similar same results Elements for other viable penetration solutions at
	  different times during the assessment period of interest):
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	  0 impact time in fractional days since 1950, UTC
	  1 missile launch time in fractional days since 1950, UTC
	  2 satellite penetration azimuth [deg]
	  3 satellite penetration elevation [deg]
	  4 satellite penetration range [km]
	  5 satellite penetration range rate [km/s]
	  6 satellite penetration solar aspect angle [deg]
	  7 satellite penetration attack angle [deg]
	  8 satellite height at penetration [km] 
	  9 ring penetration indicator:  0 = impact time is an 'entry' time; 1 = ring penetration is an 'exit'
	 time
	  10-15 unused at this time
	    
	 
	 Order of elements in the output xa_Ret array:
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	  0 number of potential viable attack penetrations (opportunities) identified vs. the target set within the
	 POI
	  1-15 unused at this time
	    
	 
	 xa_saasRet(16) - other saas output:
	 
	 table
	 
	 Index
	 Index Interpretation
	    
	  0  number of actual satellite penetrations found
	  1  satellite apogee height (km)
	  2  satellite perigee height (km)
	  3  autocone minimum cone half angle (deg)
	  4  autocone maximum cone half angle (deg)
	  5-15  not used at this time
	    
Syntax: 
	int SaasGetResults((in-Long) satKey, (in-Double[8]) xa_saasrun, (in-Double[32]) xa_msl, (in-Double[8]) xa_ls, (out-Double[*, 16]) xa_satPen, (out-Double[16]) xa_saasRet)
Parameters: 
	satKey: The satellite's unique key
	xa_saasrun: Run parameters
	xa_msl: Missile profile data.  see XA_MSL_?
	xa_ls: Launch site data.  see XA_LS_?
	xa_satPen: Array that stores data of satellite penetrations.  see XA_SATPEN_?
	xa_saasRet: Array that stores other SAAS output.  see XA_SAASRET_?
Return Value:
	0 if successfully, non-0 if there is an error
=======================================================================================
  4. SaasAutoConeSize
Purpose:
	 Computes auto cone size based on satellite height and missile profile      
Syntax: 
	double SaasAutoConeSize((in-Double) satHeight, (in-Double[32]) xa_msl)
Parameters: 
	satHeight: Satelite height (km)
	xa_msl: Missile profile data.  see XA_MSL_?
Return Value:
	computed auto cone size (deg)
=======================================================================================
  5. SaasMissileFlightTime
Purpose:
	 Computes missile time of flight based on satellite height and missile profile  
Syntax: 
	double SaasMissileFlightTime((in-Double) satHeight, (in-Double[32]) xa_msl)
Parameters: 
	satHeight: Satellite height (km)
	xa_msl: Missile profile data.  see XA_MSL_?
Return Value:
	computed missile flight time (sec)
=======================================================================================
  6. ComputeLnchOrbPlane
Purpose:
	 Computes launch orbital plane (inclination and node) based on the launch data
Syntax: 
	void ComputeLnchOrbPlane((in-Double[8]) xa_lnch, (out-Double) incli, (out-Double) node)
Parameters: 
	xa_lnch: The input launch data (see XA_LNCH_? for array arrangement)
	incli: The output planer's inclination (deg)
	node: The output planer's node (deg)
=======================================================================================
  7. FindPlanerIntersection
Purpose:
	 Compares a satellite elset against a new launch to find planer intersection time and associated data
Syntax: 
	int FindPlanerIntersection((in-Long) satKey, (in-Double[16]) xa_plnr, (out-Double[16]) xa_intxn)
Parameters: 
	satKey: The satellite's unique key
	xa_plnr: The input new launch and time of flight data.  see XA_PLNR_?
	xa_intxn: The output planer intersection data.  see XA_INTXN_?
Return Value:
	0 if successfully, non-0 if there is an error
=======================================================================================



