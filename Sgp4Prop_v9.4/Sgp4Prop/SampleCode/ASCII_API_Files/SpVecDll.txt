  1. SpVecInit
Purpose:
	 Notes: This function has been deprecated since v9.0. 
	 Initializes SpVec DLL for use in the program
	 If this function returns an error, it is recommended that the users stop the program immediately. The error occurs if the users forget to load and initialize all the prerequisite DLLs, as listed in the DLL Prerequisites section, before using this DLL.
Syntax: 
	int SpVecInit((in-Long) apAddr)
Parameters: 
	apAddr: The handle that was returned from DllMainInit()
Return Value:
	0 if SpVec.dll is initialized successfully, non-0 if there is an error
=======================================================================================
  2. SpVecGetInfo
Purpose:
	 Returns information about the current version of SpVec DLL. The information is placed in the string parameter you pass in
	 The returned string provides information about the version number, build date, and the platform of the SpVec DLL. 
Syntax: 
	void SpVecGetInfo((out-Character[128]) infoStr)
Parameters: 
	infoStr: A string to hold the information about SpVec.dll
=======================================================================================
  3. SpVecLoadFile
Purpose:
	 Loads a text file containing SpVec's
	 The users can use this function repeatedly to load B1P records from different input files. However, only unique satKeys are stored in the binary tree. Duplicated satKeys won't be stored. 
	 
	 B1P records can be included directly in the main input file or they can be read from a separate file identified with "ELTFIL=[pathname\filename]" or "VECFIL=[path/filename]".
	 
	 This function only reads B1P records from the main input file or B1P records from the file identified with ELTFIL or VECFIL in the input file. It won't read anything else.
Syntax: 
	int SpVecLoadFile((in-Character[512]) spVecFile)
Parameters: 
	spVecFile: The name of the file containing osculating vectors (SpVecs) to be loaded
Return Value:
	0 if the input file is read successfully, non-0 if there is an error
=======================================================================================
  4. SpVecSaveFile
Purpose:
	 Saves the currently loaded SpVecs's to a file
	 If the users call this routine immediately after SpVecLoadFile. The SPVECs contents in the two file should be the same (minus duplicated SPVECs or bad SPVECs).
	 
	 The purpose of this function is to save the current state of the loaded SPVECs, usually used in GUI applications, for future use.
Syntax: 
	int SpVecSaveFile((in-Character[512]) spVecFile, (in-Integer) saveMode, (in-Integer) saveForm)
Parameters: 
	spVecFile: The name of the file in which to save the settings
	saveMode: Specifies whether to create a new file or append to an existing one (0 = create, 1= append)
	saveForm: Specifies the mode in which to save the file (0 = text format, 1 = not yet implemented, reserved for future)
Return Value:
	0 if the data is successfully saved to the file, non-0 if there is an error
=======================================================================================
  5. SpVecRemoveSat
Purpose:
	 Removes an SpVec represented by the satKey from memory
	 If the users enter an invalid satKey, a non-existing satKey in memory, the function will return a non-zero value indicating an error.
Syntax: 
	int SpVecRemoveSat((in-Long) satKey)
Parameters: 
	satKey: The unique key of the satellite to be removed
Return Value:
	0 if the SpVec is removed successfully, non-0 if there is an error
=======================================================================================
  6. SpVecRemoveAllSats
Purpose:
	 Removes all SpVec's from memory
Syntax: 
	int SpVecRemoveAllSats()
Parameters: 
	None
Return Value:
	0 if all SpVec's are removed successfully from memory, non-0 if there is an error
=======================================================================================
  7. SpVecGetCount
Purpose:
	 Retrieves all of the currently loaded satKeys. These satKeys can be used to access the internal data for the SpVec's
	 See SpVecGetLoaded for example.
	 This function is useful for dynamically allocating memory for the array that is passed to the function SpVecGetLoaded().
Syntax: 
	int SpVecGetCount()
Parameters: 
	None
Return Value:
	The number of SpVec's currently loaded
=======================================================================================
  8. SpVecGetLoaded
Purpose:
	 Retrieves all of the currently loaded satKeys. These satKeys can be used to access the internal data for the SpVec's
	 It is recommended that SpVecGetCount() is used to count how many satellites are currently loaded in the SpVec DLL's binary tree. The users then use this number to dynamically allocate the satKeys array and pass it to this function. 
	 
	 If the users prefer to pass a static array to the function, make sure it is big enough to store all the satKeys in memory.
Syntax: 
	void SpVecGetLoaded((in-Integer) order, (out-Long[*]) satKeys)
Parameters: 
	order: Specifies the order in which the satKeys should be returned: 0=ascending, 1=descending, 2=order as loaded
	satKeys: The array in which to store the satKeys
=======================================================================================
  9. SpVecAddSatFrLines
Purpose:
	 Adds an SpVec using its directly specified first and second lines
	 If the satellite was previously added to the SpVec DLL's binary tree, the function also returns a negative value indicating an error. 
	 
	 The users can use this function repeatedly to add many satellites (one satellite at a time) to the SpVec DLL's binary tree. 
Syntax: 
	__int64 SpVecAddSatFrLines((in-Character[512]) line1, (in-Character[512]) line2)
Parameters: 
	line1: The first input line of the two line element set
	line2: The second input line of the two line element set
Return Value:
	The satKey of the newly added SpVec on success, a negative value on error
=======================================================================================
 10. SpVecAddSatFrLinesML
Purpose:
	 Works like SpVecAddSatFrLines but designed for Matlab
Syntax: 
	void SpVecAddSatFrLinesML((in-Character[512]) line1, (in-Character[512]) line2, (out-Long) satKey)
Parameters: 
	line1: The first input line of the two line element set
	line2: The second input line of the two line element set
	satKey: The satKey of the newly added SpVec on success, a negative value on error
=======================================================================================
 11. SpVecAddSatFrFields
Purpose:
	 Adds an SpVec using its individually provided field values
Syntax: 
	__int64 SpVecAddSatFrFields((in-Double[3]) pos, (in-Double[3]) vel, (in-Character) secClass, (in-Integer) satNum, (in-Character[8]) satName, (in-Character[17]) epochDtg, (in-Integer) revNum, (in-Integer) elsetNum, (in-Double) bterm, (in-Double) agom, (in-Double) ogParm, (in-Character[5]) coordSys)
Parameters: 
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification: U=Unclass, C=Confidential, S=Secret
	satNum: Satellite number
	satName: Satellite name A8
	epochDtg: Satellite's epoch A17 (YYYYDDDHHMMSS.SSS)
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
Return Value:
	The satKey of the newly added SpVec on success, a negative value on error
=======================================================================================
 12. SpVecAddSatFrFieldsML
Purpose:
	 Works like SpVecAddSatFrFields but designed for Matlab 
Syntax: 
	void SpVecAddSatFrFieldsML((in-Double[3]) pos, (in-Double[3]) vel, (in-Character) secClass, (in-Integer) satNum, (in-Character[8]) satName, (in-Character[17]) epochDtg, (in-Integer) revNum, (in-Integer) elsetNum, (in-Double) bterm, (in-Double) agom, (in-Double) ogParm, (in-Character[5]) coordSys, (out-Long) satKey)
Parameters: 
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification: U=Unclass, C=Confidential, S=Secret
	satNum: Satellite number
	satName: Satellite name A8
	epochDtg: Satellite's epoch A17 (YYYYDDDHHMMSS.SSS)
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
	satKey: The satKey of the newly added SpVec on success, a negative value on error
=======================================================================================
 13. SpVecUpdateSatFrFields
Purpose:
	 Updates an SpVec satellite's data in memory using individually provided field values. Note: satNum, epoch string can't be updated.
	 The satellite's unique key will not be changed in this function call. 
Syntax: 
	int SpVecUpdateSatFrFields((in-Long) satKey, (in-Double[3]) pos, (in-Double[3]) vel, (in-Character) secClass, (in-Character[8]) satName, (in-Integer) revNum, (in-Integer) elsetNum, (in-Double) bterm, (in-Double) agom, (in-Double) ogParm, (in-Character[5]) coordSys)
Parameters: 
	satKey: The sattelite's unique key
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification: U=Unclass, C=Confidential, S=Secret
	satName: Satellite name A8
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
Return Value:
	0 if the SpVec is successfully updated, non-0 if there is an error
=======================================================================================
 14. SpVecGetField
Purpose:
	 Retrieves the value of a specific field of an SpVec
	 
	 The table below shows the values for the xf_SpVec parameter:
	 
	 table
	 
	 Index
	 Index Interpretation
	 
	  1-3First 3 elements of 1P
	  4-6Second 3 elements of 1P
	  7Security classification
	  9Satellite number
	 10Satellite common name
	 11Epoch date
	 12Epoch revolution number
	 13Elset number
	 14Ballistic coefficient
	 15Radiation pressure coefficient
	 16Outgassing parameter
	 17Input coordinate system
	 
Syntax: 
	int SpVecGetField((in-Long) satKey, (in-Integer) xf_SpVec, (out-Character[512]) valueStr)
Parameters: 
	satKey: The satellite's unique key
	xf_SpVec: Predefined number specifying which field to set
	valueStr: A string to contain the value of the requested field
Return Value:
	0 if the SpVec is successfully retrieved, non-0 if there is an error
=======================================================================================
 15. SpVecSetField
Purpose:
	 Updates the value of a field of an SpVec
	 See SpVecGetField for a description of the xf_SpVec parameter.  satNum (9) and epoch date (11) cannot be altered.
	 The set value type was intentionally chosen as a character string because it allows the users to set value for different data types.
Syntax: 
	int SpVecSetField((in-Long) satKey, (in-Integer) xf_SpVec, (in-Character[512]) valueStr)
Parameters: 
	satKey: The satellite's unique key
	xf_SpVec: Predefined number specifying which field to set
	valueStr: The new value of the specified field, expressed as a string
Return Value:
	0 if the SpVec is successfully updated, non-0 if there is an error
=======================================================================================
 16. SpVecGetAllFields
Purpose:
	 Retrieves all of the data for an SpVec satellite in a single function call
Syntax: 
	int SpVecGetAllFields((in-Long) satKey, (out-Double[3]) pos, (out-Double[3]) vel, (out-Character) secClass, (out-Integer) satNum, (out-Character[8]) satName, (out-Character[17]) epochDtg, (out-Integer) revNum, (out-Integer) elsetNum, (out-Double) bterm, (out-Double) agom, (out-Double) ogParm, (out-Character[5]) coordSys)
Parameters: 
	satKey: The satellite's unique key
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification U: unclass, C: confidential, S: Secret
	satNum: Satellite number
	satName: Satellite name A8
	epochDtg: Satellite's epoch A17 (YYYYDDDHHMMSS.SSS)
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
Return Value:
	0 if the SpVec is successfully retrieved, non-0 if there is an error
=======================================================================================
 17. SpVecParse
Purpose:
	 Retrieves all of the data for an SpVec satellite in a single function call
Syntax: 
	int SpVecParse((in-Character[512]) line1, (in-Character[512]) line2, (out-Double[3]) pos, (out-Double[3]) vel, (out-Character) secClass, (out-Integer) satNum, (out-Character[8]) satName, (out-Character[17]) epochDtg, (out-Integer) revNum, (out-Integer) elsetNum, (out-Double) bterm, (out-Double) agom, (out-Double) ogParm, (out-Character[5]) coordSys)
Parameters: 
	line1: The first input line of a 1P/2P card
	line2: The second input line of a 1P/2P card
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification U: unclass, C: confidential, S: Secret
	satNum: Satellite number
	satName: Satellite name A8
	epochDtg: Satellite's epoch A17 (YYYYDDDHHMMSS.SSS)
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
Return Value:
	0 if the SpVec data is successfully parsed, non-0 if there is an error
=======================================================================================
 18. SpVecLinesToArray
Purpose:
	 Parses SPVEC data from the input first and second lines of an 1P/2P state vector and store that data back into the output parameters.
	 This function only parses data from the input SPVEC but DOES NOT load/add the input SPVEC to memory.
Syntax: 
	int SpVecLinesToArray((in-Character[512]) line1, (in-Character[512]) line2, (out-Double[512]) xa_spVec, (out-Character[512]) xs_spVec)
Parameters: 
	line1: The first line of the two line element set.
	line2: The second line of the two line element set
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Output string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
Return Value:
	0 if the SPVEC is parsed successfully, non-0 if there is an error.
=======================================================================================
 19. SpVecGetLines
Purpose:
	 Returns the first and second lines of the 1P/2P representation of an SpVec
Syntax: 
	int SpVecGetLines((in-Long) satKey, (out-Character[512]) line1, (out-Character[512]) line2)
Parameters: 
	satKey: The satellite's unique key
	line1: The resulting first line of a 1P/2P card
	line2: The resulting second line of a 1P/2P card
Return Value:
	0 if successful, non-0 on error
=======================================================================================
 20. SpVecFieldsToLines
Purpose:
	 Constructs 1P/2P cards from individually provided SpVec data fields
	 Returned line1 and line2 are empty if the function fails to construct the lines as requested.
Syntax: 
	void SpVecFieldsToLines((in-Double[3]) pos, (in-Double[3]) vel, (in-Character) secClass, (in-Integer) satNum, (in-Character[8]) satName, (in-Character[17]) epochDtg, (in-Integer) revNum, (in-Integer) elsetNum, (in-Double) bterm, (in-Double) agom, (in-Double) ogParm, (in-Character[5]) coordSys, (out-Character[512]) line1, (out-Character[512]) line2)
Parameters: 
	pos: Position vector (km)
	vel: Velocity vector (m/s)
	secClass: Security classification U: unclass, C: confidential, S: Secret
	satNum: Satellite number
	satName: Satellite name A8
	epochDtg: Satellite's epoch A17 (YYYYDDDHHMMSS.SSS)
	revNum: Revolution number
	elsetNum: Element set number
	bterm: Bterm m^2/kg
	agom: Agom  m^2/kg
	ogParm: Outgassing parameter (km/s^2)
	coordSys: Input coordinate system A5 - TMDAT/TMEPO: Epoch, MMB50/MMJ2K: J2000
	line1: The resulting first line of a 1P/2P card
	line2: The resulting second line of a 1P/2P card
=======================================================================================
 21. SpVecArrayToLines
Purpose:
	 Constructs 1P/2P cards from SPVEC data stored in the input arrays.
	 This function only parses data from the input data but DOES NOT load/add the SPVEC to memory.
	 Returned line1 and line2 will be empty if the function fails to construct the lines as requested.
Syntax: 
	void SpVecArrayToLines((in-Double[512]) xa_spVec, (in-Character[512]) xs_spVec, (out-Character[512]) line1, (out-Character[512]) line2)
Parameters: 
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Input string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
	line1: Returned first line of an SPVEC.
	line2: Returned second line of an SPVEC
=======================================================================================
 22. SpVecGetSatKey
Purpose:
	 Returns the first satKey from the currently loaded set of SpVec's that contains the specified satellite number
	 This function is useful when SpVec DLL is used in applications that requires only one record (one SpVec entry) for one satellite and the applications refer to that SpVec by its satellite number. However, the Standardized Astrodynamic Algorithms library is only working with satKeys, this function helps to return the associated satKey of that satellite.
Syntax: 
	__int64 SpVecGetSatKey((in-Integer) satNum)
Parameters: 
	satNum: The input satellite number
Return Value:
	The satellite's unique key
=======================================================================================
 23. SpVecGetSatKeyML
Purpose:
	 This function is similar to SpVecGetSatKey but designed to be used in Matlab. 
	 This function is useful when SpVec DLL is used in applications that requires only one record (one SpVec entry) for one satellite and the applications refer to that SpVec by its satellite number. However, the Standardized Astrodynamic Algorithms library is only working with satKeys, this function helps to return the associated satKey of that satellite.
Syntax: 
	void SpVecGetSatKeyML((in-Integer) satNum, (out-Long) satKey)
Parameters: 
	satNum: The input satellite number
	satKey: The satellite's unique key
=======================================================================================
 24. SpVecFieldsToSatKey
Purpose:
	 Computes a satKey from the input data
	 This is the proper way to reconstruct a satKey from its fields. If the users use their own routine to do this, the computed satKey might be different.
Syntax: 
	__int64 SpVecFieldsToSatKey((in-Integer) satNum, (in-Character[20]) epochDtg)
Parameters: 
	satNum: The input satellite number
	epochDtg: [yy]yydddhhmmss.sss or [yy]yyddd.ddddddd or DTG15, DTG17, DTG20
Return Value:
	The resulting satellite key
=======================================================================================
 25. SpVecFieldsToSatKeyML
Purpose:
	 This function is similar to SpVecFieldsToSatKey but designed to be used in Matlab. 
	 This is the proper way to reconstruct a satKey from its fields. If the users use their own routine to do this, the computed satKey might be different.
Syntax: 
	void SpVecFieldsToSatKeyML((in-Integer) satNum, (in-Character[20]) epochDtg, (out-Long) satKey)
Parameters: 
	satNum: The input satellite number
	epochDtg: [yy]yydddhhmmss.sss or [yy]yyddd.ddddddd or DTG15, DTG17, DTG20
	satKey: The resulting satellite key
=======================================================================================
 26. SpVecAddSatFrArray
Purpose:
	 Adds an SpVec using its individually provided field values
Syntax: 
	__int64 SpVecAddSatFrArray((in-Double[512]) xa_spVec, (in-Character[512]) xs_spVec)
Parameters: 
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Input string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
Return Value:
	The satKey of the newly added SPVEC on success, a negative value on error.
=======================================================================================
 27. SpVecAddSatFrArrayML
Purpose:
	 Adds an SpVec using its individually provided field values
Syntax: 
	void SpVecAddSatFrArrayML((in-Double[512]) xa_spVec, (in-Character[512]) xs_spVec, (out-Long) satKey)
Parameters: 
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Input string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
	satKey: The satKey of the newly added SPVEC on success, a negative value on error.
=======================================================================================
 28. SpVecUpdateSatFrArray
Purpose:
	 Updates existing SPVEC data with the provided new data stored in the input parameters. Note: satNum, epoch string can't be updated.
Syntax: 
	int SpVecUpdateSatFrArray((in-Long) satKey, (in-Double[512]) xa_spVec, (in-Character[512]) xs_spVec)
Parameters: 
	satKey: The satellite's unique key
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Input string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
Return Value:
	0 if the SPVEC is successfully updated, non-0 if there is an error.
=======================================================================================
 29. SpVecDataToArray
Purpose:
	 Retrieves SPVEC data and stored it in the passing parameters
Syntax: 
	int SpVecDataToArray((in-Long) satKey, (out-Double[512]) xa_spVec, (out-Character[512]) xs_spVec)
Parameters: 
	satKey: The satellite's unique key
	xa_spVec: Array containing SPVEC's numerical fields, see XA_SPVEC_? for array arrangement
	xs_spVec: Output string that contains all SPVEC's text fields, see XS_SPVEC_? for column arrangement
Return Value:
	0 if all values are retrieved successfully, non-0 if there is an error
=======================================================================================



