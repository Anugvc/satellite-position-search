package afspc.astrostds.services;

import java.io.*;
import java.io.Reader;
import java.util.Date;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.Platform;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.ByteByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.DoubleByReference;

import afspc.astrostds.wrappers.*;
import afspc.astrostds.utilities.Utility;

public class SrvObs
{
	/**
	 * A method for returning a new ObsRecord Object based on the provided obsKey
	 * @param obsKey	The provided obsKey generated by the Obs dll
	 * @return			The generated ObsRecord
	 */
	public static ObsRecord GetObsData(long obsKey)
	{
		return new ObsRecord(obsKey);
	}

	/**
	 * Print ob header
	 * @param fpOut			The BufferedWriter carrying the file to write to
	 * @param obsType		The Observation type that dictates the print format
	 * @throws IOException
	 */
	public static void PrintObsHeader(BufferedWriter fpOut, byte obsType) throws IOException
	{
		if (obsType == 'P' || obsType == 'V')
		{
			fpOut.write("  OBS A  TAG  SEN         TIME         OB       X          Y        Z  \n");
			fpOut.write("  NO. S  NO.  NO.  YY DDD HHMM SS.SSS CL/TP    (km)       (km)     (km)\n");
			fpOut.write(" ======================================================================\n");
		}
		else
		{
			fpOut.write("  OBS A  TAG  SEN         TIME         OB    AZ/RT.A.   EL/DECL   RANGE    RG-RT\n");
			fpOut.write("  NO. S  NO.  NO.  YY DDD HHMM SS.SSS CL/TP   (deg)      (deg)     (km)   (km/s)\n");
			fpOut.write(" ===============================================================================\n");
		}
	}

	/**
	 * A nested class containing the ObsRecord object and associated methods
	 */
	public static class ObsRecord
	{
		//ObsRecord Variabls
		private int  errCode;

		private byte secClass;
		private int satNum;
		private int senNum;
		private double obsTimeDs50UTC;
		private double elOrDec;
		private double azOrRA;
		private double range;
		private double rangeRate;
		private double elRate;
		private double azRate;
		private double rangeAccel;
		private byte obsType;
		private int trackInd;
		private int ASTAT;
		private int siteTag;
		private int spadocTag;
		private double[] pos = new double[3];
		private double[] vel = new double[3];
		private double[] extArr	= new double[128];

		/**
		 * The obsRecord constructor, populates the obsRecord variables generated by calling ObsGetAllFields
		 * @param obsKey	The obsKey passed into the ObsGetAllFields
		 */
		public ObsRecord(long obsKey){
			ByteByReference 	secClass 		= new ByteByReference();
			IntByReference  	satNum 			= new IntByReference();
			IntByReference  	senNum 			= new IntByReference();
			DoubleByReference	obsTimeDs50UTC	= new DoubleByReference();
			DoubleByReference	elOrDec 		= new DoubleByReference();
			DoubleByReference   azOrRA 			= new DoubleByReference();
			DoubleByReference   range 			= new DoubleByReference();
			DoubleByReference   rangeRate 		= new DoubleByReference();
			DoubleByReference   elRate 			= new DoubleByReference();
			DoubleByReference   azRate 			= new DoubleByReference();
			DoubleByReference   rangeAccel 		= new DoubleByReference();
			ByteByReference 	obsType 		= new ByteByReference();
			IntByReference      trackInd 		= new IntByReference();
			IntByReference      ASTAT 			= new IntByReference();
			IntByReference      siteTag 		= new IntByReference();
			IntByReference      spadocTag 		= new IntByReference();

			errCode = JnaObs.ObsGetAllFields(obsKey, secClass, satNum, senNum, obsTimeDs50UTC,
                             elOrDec, azOrRA, range, rangeRate, elRate, azRate,
                             rangeAccel, obsType, trackInd, ASTAT, siteTag, spadocTag, pos, vel, extArr);

			if(errCode == 0) {
				this.secClass = secClass.getValue();
				this.satNum = satNum.getValue();
				this.senNum = senNum.getValue();
				this.obsTimeDs50UTC = obsTimeDs50UTC.getValue();
				this.elOrDec = elOrDec.getValue();
				this.azOrRA = azOrRA.getValue();
				this.range = range.getValue();
				this.rangeRate = rangeRate.getValue();
				this.elRate = elRate.getValue();
				this.azRate = azRate.getValue();
				this.rangeAccel = rangeAccel.getValue();
				this.obsType = obsType.getValue();
				this.trackInd = trackInd.getValue();
				this.ASTAT = ASTAT.getValue();
				this.siteTag = siteTag.getValue();
				this.spadocTag = spadocTag.getValue();
			}
		}

		/**
		 * Print ob data
		 * @param fpOut		The BufferedWriter object carrying the file to write to
		 * @param obsNum	The Observation number
		 */
		public void PrintObsData(BufferedWriter fpOut, int obsNum) throws IOException
		{

			fpOut.write(String.format(" %4d %1d %5d %3d  %18s %c %c", obsNum, ASTAT, satNum, senNum,
					SrvTimeFunc.UTCToDtg18Str(obsTimeDs50UTC), secClass, obsType));

			if ((obsType >= '1' && obsType <= '5') || obsType == '8' || obsType == '9' || obsType == 'M' || obsType == 'O')
				fpOut.write(String.format("   %8.4f%10.4f", azOrRA, elOrDec));
			else if (obsType == 'P' || obsType == 'V')
				fpOut.write(String.format("%11.3f%11.3f%11.3f", pos[0], pos[1], pos[2]));

			if (range != 0)
				fpOut.write(String.format("%11.3f", range));

			if (rangeRate != 0)
				fpOut.write(String.format("%7.4f", rangeRate));

			fpOut.write("\n");
		}
		/**
		 * These functions retrieve the various ObsRecord parameters. They are documented
		 * once here instead of individually since the documentation block would be
		 * similar for all of them.
		 *
		 * Return Value
		 * the requested data. We express these values as standard Java types, not JNA
		 * objects. The type varies depending on the control parameter being retrieved.
		 */
		//Getters
		public int getErrCode() {
			return errCode;
		}

		public byte getSecClass() {
			return secClass;
		}

		public int getSatNum() {
			return satNum;
		}

		public int getSenNum() {
			return senNum;
		}

		public double getObsTimeDs50UTC() {
			return obsTimeDs50UTC;
		}

		public double getElOrDec() {
			return elOrDec;
		}

		public double getAzOrRA() {
			return azOrRA;
		}

		public double getRange() {
			return range;
		}

		public double getRangeRate() {
			return rangeRate;
		}

		public double getElRate() {
			return elRate;
		}

		public double getAzRate() {
			return azRate;
		}

		public double getRangeAccel() {
			return rangeAccel;
		}

		public byte getObsType() {
			return obsType;
		}

		public int getTrackInd() {
			return trackInd;
		}

		public int getASTAT() {
			return ASTAT;
		}

		public int getSiteTag() {
			return siteTag;
		}

		public int getSpadocTag() {
			return spadocTag;
		}

		public double[] getPos() {
			return pos;
		}

		public double[] getVel() {
			return vel;
		}

		public double[] getExtArr() {
			return extArr;
		}
	}
}

